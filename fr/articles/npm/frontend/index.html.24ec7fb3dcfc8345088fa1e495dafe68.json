{"head":{"layout":"Post","comments":true,"date":"2014-05-06","title":"NPM comme package manager pour le front-end","tags":["npm","package manager","javascript","css"],"authors":["kewah"],"description":"NPM, le package manager de Node.js, a grandement participé au succès de ce dernier. Il facilite la création, le partage et l'installation…"},"body":"<p>NPM, le package manager de Node.js, a grandement participé au succès de ce\ndernier. Il facilite la création, le partage et l'installation de modules. Il\npermet aux développeurs de suivre la <a href=\"http://www.faqs.org/docs/artu/ch01s06.html\">philosophie\nUnix</a> où chaque module fait une\nseule tâche (évite la complexité, facilite la réutilisation et les tests).</p>\n<p>Cependant NPM ne se limite pas aux modules JavaScript. Il est en effet possible\nde publier tout type de fichier et c'est là que ça devient intéressant pour nos\nmodules front-end, qui peuvent aussi être CSS, HTML, fonts, etc.</p>\n<h2 id=\"module-javascript\"><a href=\"#module-javascript\" class=\"phenomic-HeadingAnchor\">#</a>Module JavaScript</h2>\n<p>Si vous n'êtes pas familier(e) avec la création d'un module JavaScript, je vous\nconseille d'exécuter la commande <code>npm init</code> qui va vous aider à générer votre\n<code>package.json</code> (fichier de configuration utilisé par NPM). Le champ\n\"<a href=\"https://www.npmjs.org/doc/json.html#main\">main</a>\" définit le point d'entrée de\nvotre module.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"putaindemodule\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"0.0.1\"</span>,\n  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>\n}</code></pre>\n<p>Dans un article précédent, il vous a été présenté le développement d'une\napplication autour de <a href=\"/fr/articles/js/browserify/\">modules JavaScript avec\nBrowserify</a>.</p>\n<h2 id=\"module-pour-tout-type-de-fichier\"><a href=\"#module-pour-tout-type-de-fichier\" class=\"phenomic-HeadingAnchor\">#</a>Module pour tout type de fichier</h2>\n<p>C'est grâce au champ \"<a href=\"https://www.npmjs.org/doc/json.html#files\">files</a>\" que\nl'on peut définir la liste des fichiers que l'on va publier (autre que les\nfichiers JavaScript). Voici un exemple de <code>package.json</code> d'un module pour un\nsystème de grille CSS.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"putaindegrid\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"0.0.1\"</span>,\n  <span class=\"hljs-attr\">\"files\"</span>: [<span class=\"hljs-string\">\"grid.css\"</span>]\n}</code></pre>\n<p>Il ne reste de plus qu'à le <a href=\"https://gist.github.com/coolaj86/1318304\">publier</a>\net à l'installer (<code>npm install putaindegrid --save</code>) dans vos différents projets\noù vous en aurez besoin. Votre fichier <code>grid.css</code> est accessible dans le dossier\n<code>node_modules/putaindegrid/grid.css</code>, vous pouvez donc l'inclure dans votre page\nHTML. (Ou l'<code>@import</code>er dans votre fichier Sass/Less principal.)</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"node_modules/putaindegrid/grid.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span>></span></code></pre>\n<h2 id=\"pourquoi-npm-plutôt-quun-autre-package-manager-\"><a href=\"#pourquoi-npm-plut%C3%B4t-quun-autre-package-manager-\" class=\"phenomic-HeadingAnchor\">#</a>Pourquoi NPM plutôt qu'un autre package manager ?</h2>\n<ul>\n<li>Il a déjà fait ses preuves comme package manager pour Node.js.</li>\n<li>Pas besoin d'installer un nouvel outil, NPM étant installé avec Node.js, ce\nqui évite un lot de bugs et de fichiers de configuration supplémentaires (un\nsimple <code>package.json</code> suffit).</li>\n<li>Et surtout, toutes les dépendances de votre projet peuvent être gérées via\nNPM: votre tasks runner et ses plugins (<a href=\"/fr/articles/js/gulp/\">Gulp</a>,\n<a href=\"/fr/articles/js/grunt/\">Grunt</a> &#x26; co), vos <a href=\"/fr/articles/js/browserify/\">modules\nJavaScript</a>, vos\n<a href=\"/fr/articles/js/tests/frontend/\">tests</a> et comme on vient de le voir, vos\nfichiers de style.</li>\n</ul>\n<p>Dans le cas où vous n'auriez pas envie de passer par l'étape de publication\n(<code>npm publish</code>) pour diverses raisons, sachez qu'il est possible\nd'<a href=\"https://www.npmjs.org/doc/cli/npm-install.html\">installer</a> des packages qui\nne sont pas publiés. Mon alternative favorite étant l'utilisation du namespace\nGithub <code>npm install user/repo --save</code>. Cependant, même si vous ne publiez pas\nvotre module, lorsque vous en modifiez le code n'oubliez jamais de mettre à jour\nsa version suivant la convention <a href=\"http://semver.org/\">semver</a>. Sinon vous serez\nsusceptible d'inclure des bugs dans les projets qui l'utilisent. Ce qui implique\n:</p>\n<ul>\n<li>Mettre à jour le champ \"version\" de votre <code>package.json</code> (vous pouvez vous\naider des commandes <code>npm version patch</code>, <code>npm version minor</code> et <code>npm version major</code>).</li>\n<li>Ajouter un tag git (<code>git tag -a 0.1.0 -m \"Initial release\"</code>).</li>\n</ul>\n<p>NPM est une excellente solution pour gérer les dépendences de votre projet,\naussi bien pour vos outils de build, que pour vos assets front-end. Je pense\nqu'il est important de garder les choses simples, en commençant par utiliser un\nseul gestionnaire de dépendances, dans le cas où celui-ci n'intègre pas d'autres\nfonctionnalités que le téléchargement de modules.</p>\n<p>Bye bye Bower!</p>\n<p>PS: vous avez besoin d'un module qui n'a pas de package.json ? Pas de problème,\n<a href=\"/fr/articles/npm/napa/\">napa est là pour ça</a></p>\n","rawBody":"\nNPM, le package manager de Node.js, a grandement participé au succès de ce\ndernier. Il facilite la création, le partage et l'installation de modules. Il\npermet aux développeurs de suivre la [philosophie\nUnix](http://www.faqs.org/docs/artu/ch01s06.html) où chaque module fait une\nseule tâche (évite la complexité, facilite la réutilisation et les tests).\n\nCependant NPM ne se limite pas aux modules JavaScript. Il est en effet possible\nde publier tout type de fichier et c'est là que ça devient intéressant pour nos\nmodules front-end, qui peuvent aussi être CSS, HTML, fonts, etc.\n\n## Module JavaScript\n\nSi vous n'êtes pas familier(e) avec la création d'un module JavaScript, je vous\nconseille d'exécuter la commande `npm init` qui va vous aider à générer votre\n`package.json` (fichier de configuration utilisé par NPM). Le champ\n\"[main](https://www.npmjs.org/doc/json.html#main)\" définit le point d'entrée de\nvotre module.\n\n```json\n{\n  \"name\": \"putaindemodule\",\n  \"version\": \"0.0.1\",\n  \"main\": \"index.js\"\n}\n```\n\nDans un article précédent, il vous a été présenté le développement d'une\napplication autour de [modules JavaScript avec\nBrowserify](/fr/articles/js/browserify/).\n\n## Module pour tout type de fichier\n\nC'est grâce au champ \"[files](https://www.npmjs.org/doc/json.html#files)\" que\nl'on peut définir la liste des fichiers que l'on va publier (autre que les\nfichiers JavaScript). Voici un exemple de `package.json` d'un module pour un\nsystème de grille CSS.\n\n```json\n{\n  \"name\": \"putaindegrid\",\n  \"version\": \"0.0.1\",\n  \"files\": [\"grid.css\"]\n}\n```\n\nIl ne reste de plus qu'à le [publier](https://gist.github.com/coolaj86/1318304)\net à l'installer (`npm install putaindegrid --save`) dans vos différents projets\noù vous en aurez besoin. Votre fichier `grid.css` est accessible dans le dossier\n`node_modules/putaindegrid/grid.css`, vous pouvez donc l'inclure dans votre page\nHTML. (Ou l'`@import`er dans votre fichier Sass/Less principal.)\n\n```html\n<link href=\"node_modules/putaindegrid/grid.css\" rel=\"stylesheet\" type=\"text/css\">\n```\n\n## Pourquoi NPM plutôt qu'un autre package manager ?\n\n* Il a déjà fait ses preuves comme package manager pour Node.js.\n* Pas besoin d'installer un nouvel outil, NPM étant installé avec Node.js, ce\n  qui évite un lot de bugs et de fichiers de configuration supplémentaires (un\n  simple `package.json` suffit).\n* Et surtout, toutes les dépendances de votre projet peuvent être gérées via\n  NPM: votre tasks runner et ses plugins ([Gulp](/fr/articles/js/gulp/),\n  [Grunt](/fr/articles/js/grunt/) & co), vos [modules\n  JavaScript](/fr/articles/js/browserify/), vos\n  [tests](/fr/articles/js/tests/frontend/) et comme on vient de le voir, vos\n  fichiers de style.\n\nDans le cas où vous n'auriez pas envie de passer par l'étape de publication\n(`npm publish`) pour diverses raisons, sachez qu'il est possible\nd'[installer](https://www.npmjs.org/doc/cli/npm-install.html) des packages qui\nne sont pas publiés. Mon alternative favorite étant l'utilisation du namespace\nGithub `npm install user/repo --save`. Cependant, même si vous ne publiez pas\nvotre module, lorsque vous en modifiez le code n'oubliez jamais de mettre à jour\nsa version suivant la convention [semver](http://semver.org/). Sinon vous serez\nsusceptible d'inclure des bugs dans les projets qui l'utilisent. Ce qui implique\n:\n\n* Mettre à jour le champ \"version\" de votre `package.json` (vous pouvez vous\n  aider des commandes `npm version patch`, `npm version minor` et `npm version\n  major`).\n* Ajouter un tag git (`git tag -a 0.1.0 -m \"Initial release\"`).\n\nNPM est une excellente solution pour gérer les dépendences de votre projet,\naussi bien pour vos outils de build, que pour vos assets front-end. Je pense\nqu'il est important de garder les choses simples, en commençant par utiliser un\nseul gestionnaire de dépendances, dans le cas où celui-ci n'intègre pas d'autres\nfonctionnalités que le téléchargement de modules.\n\nBye bye Bower!\n\nPS: vous avez besoin d'un module qui n'a pas de package.json ? Pas de problème,\n[napa est là pour ça](/fr/articles/npm/napa/)\n","__filename":"fr/articles/npm/frontend/index.md","__url":"/fr/articles/npm/frontend/","__resourceUrl":"/fr/articles/npm/frontend/index.html","__dataUrl":"/fr/articles/npm/frontend/index.html.24ec7fb3dcfc8345088fa1e495dafe68.json"}