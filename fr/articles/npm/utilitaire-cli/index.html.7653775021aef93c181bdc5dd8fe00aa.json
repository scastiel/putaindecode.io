{"head":{"layout":"Post","comments":true,"date":"2015-05-12","title":"Les utilitaires en ligne de commande","tags":["cli","npm","iojs/nodejs"],"authors":["magsout"],"description":"Avoir accès à ses utilitaires en ligne de commande (CLI) est un quotidien dans nos métiers et un avantage indéniable. Ce n'est pas nouveau…"},"body":"<p>Avoir accès à ses utilitaires en ligne de commande\n(<a href=\"https://en.wikipedia.org/wiki/Command-line_interface\">CLI</a>) est un quotidien\ndans nos métiers et un avantage indéniable. Ce n'est pas nouveau et cela existe\ndepuis la nuit des temps. Tout utilisateur d'Unix voue un culte particulier à\nson terminal.</p>\n<p>J'ai récemment eu à développer un utilitaire en Node.js/iojs, j'ai donc voulu\navec cet article déblayer un peu le terrain et présenter quelques utilitaires\ntrès pratiques.</p>\n<p>Deux postulats avant de commencer :</p>\n<ul>\n<li>Pourquoi JavaScript ? En cohérence avec le workflow que j'utilise.</li>\n<li>Cet article n'a pas pour but d'apprendre à écrire du JavaScript avec\nNode.js/iojs.</li>\n</ul>\n<h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"phenomic-HeadingAnchor\">#</a>Hello world</h2>\n<p>Avant de commencer à coder, il va tout d'abord falloir créer deux fichiers qui\nseront nécessaires et obligatoires :</p>\n<pre><code class=\"hljs language-console\">// création du dossier\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> mkdir putaindecode-cli &#x26;&#x26; <span class=\"hljs-built_in\">cd</span> putaindecode-cli</span>\n\n// création de index.js\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> touch index.js</span>\n\n// création de package.json\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> touch package.json</span></code></pre>\n<p>Le fichier <code>index.js</code> va se présenter comme ceci :</p>\n<pre><code>#!/usr/bin/env node\n// Cette ligne ou shebang permet de définir l'interpréteur de notre script, à savoir `node`\n\n// notre fameux hello world\nconsole.log(\"Hello world\")\n</code></pre>\n<p>Pour notre fichier <code>package.json</code>, deux méthodes possibles pour l'écrire, soit\nen faisant <code>npm init</code> puis suivre les instructions, soit adapter ce JSON :</p>\n<pre><code class=\"hljs language-console\">{\n  \"name\": \"putaindecode-cli\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Putaindecode cli\",\n  \"keywords\": [\n    \"cli\",\n    \"npm\"\n  ],\n  \"author\": \"magsout\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/putaindecode/putaindecode-cli.git\"\n  },\n  \"engines\": {\n    \"node\": \">=0.10\"\n  },\n  \"homepage\":\"https://github.com/putaindecode-cs/putaindecode-cli\"\n  \"bugs\": {\n    \"url\": \"https://github.com/putaindecode-cs/putaindecode-cli/issues\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  \"bin\": {\n    \"putaindecode\": \"index.js\"\n  }\n}</code></pre>\n<p>La ligne importante à ne surtout pas oublier :</p>\n<pre><code class=\"hljs language-console\">\"bin\": {\n  \"putaindecode-cli\": \"index.js\"\n}</code></pre>\n<p>Elle permettra de déterminer le script à exécuter lorsque la commande\n<code>putaindecode-cli</code> sera lancée.</p>\n<p>Si on vulgarise un peu le principe, en installant le script, le fichier\n<code>index.js</code> sera renommé en <code>putaindecode-cli.js</code> et sera copié dans le\nrépertoire adéquat (cela dépend de l'OS).</p>\n<p>Lorsque la commande <code>putaindecode-cli</code> sera exécutée, le shell va chercher le\nfichier exécutable en utilisant les répertoires listés dans la variable PATH.</p>\n<p>Si on suit ce raisonnement, l'installation d'un script écrasera automatiquement\nl'ancienne version ou tout script de même nom.</p>\n<p>Pour s'assurer qu'il n'existe pas d'autres commandes portant le même nom, il est\nconseillé d'utiliser la commande : <code>which putaindecode-cli</code> qui ne retournera\nrien s'il n'y a aucun résultat :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">#</span><span class=\"bash\">putaindecode-cli ne retourne aucun résultat</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">which</span> putaindecode-cli</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">node est installé et accessible au path suivant</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">which</span> node</span>\n  /usr/local/bin/node</code></pre>\n<h2 id=\"installation-du-script\"><a href=\"#installation-du-script\" class=\"phenomic-HeadingAnchor\">#</a>Installation du script</h2>\n<p>Afin de vérifier que le script fonctionne correctement, il suffit tout\nsimplement d'exécuter dans le répertoire la commande : <code>./index.js</code>.</p>\n<p>Une erreur de droit ? Un petit chmod pour arranger ça : <code>chmod +x index.js</code>.</p>\n<p>À ce stade, si tout fonctionne bien, <code>Hello World</code> va s'afficher.</p>\n<p>Par contre, exécuter notre script de la sorte n'est pas très pratique, d'autant\nplus qu'il sera nécessaire de connaître à chaque fois le chemin vers le fichier.</p>\n<p>Il serait beaucoup plus simple de pouvoir exécuter le script comme une commande.\nComme pour tout package npm, cela se fait avec <code>npm install</code>.</p>\n<pre><code class=\"hljs language-console\">// installation en global du script\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> npm install -g</span>\n\n// exécution de la commande\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> putaindecode-cli</span>\n\n// résultat de la commande\nHello world</code></pre>\n<p>Le script est maintenant accessible partout sur l'OS grâce à la commande\n<code>putaindecode-cli</code>. L'installation en global n'est pas absolument pas\nnécessaire, tout dépend de l'intérêt de votre script. Il est d'ailleurs souvent\npréférable de l'installer en local dans un projet avec <code>--save</code> ou <code>--save-dev</code>.</p>\n<h2 id=\"installation-des-scripts-de-base\"><a href=\"#installation-des-scripts-de-base\" class=\"phenomic-HeadingAnchor\">#</a>Installation des scripts de base</h2>\n<p>La puissance de <code>NPM</code> provient de son nombre impressionnant de packages mis à\ndisposition.</p>\n<p>Pour gagner du temps et éviter d'avoir à recoder la roue. Le script\n<code>putaindecode-cli</code> va avoir besoin de trois choses :</p>\n<ul>\n<li>une gestion des commandes (commande, argument, aide)</li>\n<li>une gestion des couleurs (notice, error, warning)</li>\n<li>une capacité à stopper proprement notre code.</li>\n</ul>\n<h3 id=\"commander\"><a href=\"#commander\" class=\"phenomic-HeadingAnchor\">#</a><code>commander</code></h3>\n<p>Pour les commandes avec en prime la gestion des arguments et de l'aide,\n<a href=\"https://github.com/tj/commander\">commander</a> est tout a fait adapté et répondra\npratiquement à tous nos besoins.</p>\n<p>Il est simple d'utilisation et très bien maintenu.</p>\n<p>Voici un exemple de ce qu'on peut faire :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* Default */</span>\nprogram.version(pkg.version);\n\n<span class=\"hljs-comment\">/* command */</span>\nprogram\n  .command(<span class=\"hljs-string\">\"command\"</span>)\n  .alias(<span class=\"hljs-string\">\"c\"</span>)\n  .description(<span class=\"hljs-string\">\"   command does something\"</span>)\n  .option(<span class=\"hljs-string\">\"-v, --verbose\"</span>, <span class=\"hljs-string\">\"Verbose\"</span>)\n  .option(<span class=\"hljs-string\">\"-f, --force\"</span>, <span class=\"hljs-string\">\"Force installation\"</span>)\n  .action(commandAction)\n  .on(<span class=\"hljs-string\">\"--help\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"  Example:\"</span>);\n    <span class=\"hljs-built_in\">console</span>.log();\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"     command does something\"</span>);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"     $ putaindecode-cli command\"</span>);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"\"</span>);\n  });\n\n<span class=\"hljs-comment\">/* help */</span>\nprogram.on(<span class=\"hljs-string\">\"--help\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"  Examples:\"</span>);\n  <span class=\"hljs-built_in\">console</span>.log();\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"     command do something\"</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"     $ putaindecode-cli command\"</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"     Force command does something\"</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"     $ putaindecode-cli command -f\"</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"\"</span>);\n});\n\nprogram.parse(process.argv);\n\n<span class=\"hljs-comment\">/* help by default */</span>\n<span class=\"hljs-keyword\">if</span> (!program.args.length) program.help();</code></pre>\n<h3 id=\"chalk\"><a href=\"#chalk\" class=\"phenomic-HeadingAnchor\">#</a><code>chalk</code></h3>\n<p><em>Null</em> besoin de faire un cours sur les couleurs, mais l'affichage d'une notice\nest bien plus pertinent avec sa couleur associée. C'est à ce moment qu'entre en\njeu <a href=\"https://github.com/sindresorhus/chalk\">chalk</a>. Relativement simple à mettre\nen place et à utiliser :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> chalk = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"chalk\"</span>);\n\n<span class=\"hljs-comment\">/* var */</span>\n<span class=\"hljs-keyword\">var</span> error = chalk.bold.red;\n<span class=\"hljs-keyword\">var</span> warn = chalk.yellow;\n<span class=\"hljs-keyword\">var</span> success = chalk.green;\n<span class=\"hljs-keyword\">var</span> notice = chalk.blue;\n\n<span class=\"hljs-comment\">/* code */</span>\n<span class=\"hljs-built_in\">console</span>.log(warn(<span class=\"hljs-string\">\"No command\"</span>));\n<span class=\"hljs-built_in\">console</span>.log(notice(<span class=\"hljs-string\">\"file modified !\"</span>));</code></pre>\n<h3 id=\"exit\"><a href=\"#exit\" class=\"phenomic-HeadingAnchor\">#</a><code>exit</code></h3>\n<p>Peu importe comment s'exécute son code, il est important de bien savoir\nmaitriser l'arrêt de son script. Pour ça, <code>process.exit()</code> nous sera bien utile.</p>\n<p>Dans le cas d'une erreur, la valeur de <code>exit</code> doit systématiquement être\nsupérieure à 0, et donc bien naturellement en cas de succès, elle doit être\négale à 0.</p>\n<p>Voici une <a href=\"http://www.virtsync.com/c-error-codes-include-errno\">liste des\nvaleurs</a> de <code>exit</code> et de\nleurs correspondances.</p>\n<h2 id=\"thanks-god-for-our-terminal\"><a href=\"#thanks-god-for-our-terminal\" class=\"phenomic-HeadingAnchor\">#</a>Thanks god for our terminal</h2>\n<p>Si vous souhaitez voir quelques exemples de projets avec des commandes et des\nmises en situations intéressantes, allez faire un tour sur ces projets :</p>\n<ul>\n<li><a href=\"https://github.com/cssnext/cssnext/blob/9aad8a94eaef5c73f3e925cc63ede6945403a520/src/bin.js\">cssnext</a></li>\n<li><a href=\"https://github.com/sindresorhus/trash-cli/blob/master/cli.js\">trash</a></li>\n</ul>\n<p>Je vous invite également à visionner la\n<a href=\"http://blog.clement.delafargue.name/posts/2015-02-25-declarative-cli-parsing-in-js.html\">vidéo</a>\nde <a href=\"https://twitter.com/clementd\">Clement Delafargue</a> qui a fait une\nprésentation sur le sujet en début d'année.</p>\n<p>À partir de là on dispose d'une bonne base pour refaire le monde et accroître la\nflemme du développeur que l'on est en automatisant tout plein de tâches.</p>\n","rawBody":"\nAvoir accès à ses utilitaires en ligne de commande\n([CLI](https://en.wikipedia.org/wiki/Command-line_interface)) est un quotidien\ndans nos métiers et un avantage indéniable. Ce n'est pas nouveau et cela existe\ndepuis la nuit des temps. Tout utilisateur d'Unix voue un culte particulier à\nson terminal.\n\nJ'ai récemment eu à développer un utilitaire en Node.js/iojs, j'ai donc voulu\navec cet article déblayer un peu le terrain et présenter quelques utilitaires\ntrès pratiques.\n\nDeux postulats avant de commencer :\n\n* Pourquoi JavaScript ? En cohérence avec le workflow que j'utilise.\n* Cet article n'a pas pour but d'apprendre à écrire du JavaScript avec\n  Node.js/iojs.\n\n## Hello world\n\nAvant de commencer à coder, il va tout d'abord falloir créer deux fichiers qui\nseront nécessaires et obligatoires :\n\n```console\n// création du dossier\n$ mkdir putaindecode-cli && cd putaindecode-cli\n\n// création de index.js\n$ touch index.js\n\n// création de package.json\n$ touch package.json\n```\n\nLe fichier `index.js` va se présenter comme ceci :\n\n```\n#!/usr/bin/env node\n// Cette ligne ou shebang permet de définir l'interpréteur de notre script, à savoir `node`\n\n// notre fameux hello world\nconsole.log(\"Hello world\")\n```\n\nPour notre fichier `package.json`, deux méthodes possibles pour l'écrire, soit\nen faisant `npm init` puis suivre les instructions, soit adapter ce JSON :\n\n```console\n{\n  \"name\": \"putaindecode-cli\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Putaindecode cli\",\n  \"keywords\": [\n    \"cli\",\n    \"npm\"\n  ],\n  \"author\": \"magsout\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/putaindecode/putaindecode-cli.git\"\n  },\n  \"engines\": {\n    \"node\": \">=0.10\"\n  },\n  \"homepage\":\"https://github.com/putaindecode-cs/putaindecode-cli\"\n  \"bugs\": {\n    \"url\": \"https://github.com/putaindecode-cs/putaindecode-cli/issues\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  \"bin\": {\n    \"putaindecode\": \"index.js\"\n  }\n}\n```\n\nLa ligne importante à ne surtout pas oublier :\n\n```console\n\"bin\": {\n  \"putaindecode-cli\": \"index.js\"\n}\n```\n\nElle permettra de déterminer le script à exécuter lorsque la commande\n`putaindecode-cli` sera lancée.\n\nSi on vulgarise un peu le principe, en installant le script, le fichier\n`index.js` sera renommé en `putaindecode-cli.js` et sera copié dans le\nrépertoire adéquat (cela dépend de l'OS).\n\nLorsque la commande `putaindecode-cli` sera exécutée, le shell va chercher le\nfichier exécutable en utilisant les répertoires listés dans la variable PATH.\n\nSi on suit ce raisonnement, l'installation d'un script écrasera automatiquement\nl'ancienne version ou tout script de même nom.\n\nPour s'assurer qu'il n'existe pas d'autres commandes portant le même nom, il est\nconseillé d'utiliser la commande : `which putaindecode-cli` qui ne retournera\nrien s'il n'y a aucun résultat :\n\n```console\n#putaindecode-cli ne retourne aucun résultat\n$ which putaindecode-cli\n\n#node est installé et accessible au path suivant\n$ which node\n  /usr/local/bin/node\n```\n\n## Installation du script\n\nAfin de vérifier que le script fonctionne correctement, il suffit tout\nsimplement d'exécuter dans le répertoire la commande : `./index.js`.\n\nUne erreur de droit ? Un petit chmod pour arranger ça : `chmod +x index.js`.\n\nÀ ce stade, si tout fonctionne bien, `Hello World` va s'afficher.\n\nPar contre, exécuter notre script de la sorte n'est pas très pratique, d'autant\nplus qu'il sera nécessaire de connaître à chaque fois le chemin vers le fichier.\n\nIl serait beaucoup plus simple de pouvoir exécuter le script comme une commande.\nComme pour tout package npm, cela se fait avec `npm install`.\n\n```console\n// installation en global du script\n$ npm install -g\n\n// exécution de la commande\n$ putaindecode-cli\n\n// résultat de la commande\nHello world\n```\n\nLe script est maintenant accessible partout sur l'OS grâce à la commande\n`putaindecode-cli`. L'installation en global n'est pas absolument pas\nnécessaire, tout dépend de l'intérêt de votre script. Il est d'ailleurs souvent\npréférable de l'installer en local dans un projet avec `--save` ou `--save-dev`.\n\n## Installation des scripts de base\n\nLa puissance de `NPM` provient de son nombre impressionnant de packages mis à\ndisposition.\n\nPour gagner du temps et éviter d'avoir à recoder la roue. Le script\n`putaindecode-cli` va avoir besoin de trois choses :\n\n* une gestion des commandes (commande, argument, aide)\n* une gestion des couleurs (notice, error, warning)\n* une capacité à stopper proprement notre code.\n\n### `commander`\n\nPour les commandes avec en prime la gestion des arguments et de l'aide,\n[commander](https://github.com/tj/commander) est tout a fait adapté et répondra\npratiquement à tous nos besoins.\n\nIl est simple d'utilisation et très bien maintenu.\n\nVoici un exemple de ce qu'on peut faire :\n\n```js\n/* Default */\nprogram.version(pkg.version);\n\n/* command */\nprogram\n  .command(\"command\")\n  .alias(\"c\")\n  .description(\"   command does something\")\n  .option(\"-v, --verbose\", \"Verbose\")\n  .option(\"-f, --force\", \"Force installation\")\n  .action(commandAction)\n  .on(\"--help\", function() {\n    console.log(\"  Example:\");\n    console.log();\n    console.log(\"     command does something\");\n    console.log(\"     $ putaindecode-cli command\");\n    console.log(\"\");\n  });\n\n/* help */\nprogram.on(\"--help\", function() {\n  console.log(\"  Examples:\");\n  console.log();\n  console.log(\"     command do something\");\n  console.log(\"     $ putaindecode-cli command\");\n  console.log(\"\");\n  console.log(\"     Force command does something\");\n  console.log(\"     $ putaindecode-cli command -f\");\n  console.log(\"\");\n});\n\nprogram.parse(process.argv);\n\n/* help by default */\nif (!program.args.length) program.help();\n```\n\n### `chalk`\n\n_Null_ besoin de faire un cours sur les couleurs, mais l'affichage d'une notice\nest bien plus pertinent avec sa couleur associée. C'est à ce moment qu'entre en\njeu [chalk](https://github.com/sindresorhus/chalk). Relativement simple à mettre\nen place et à utiliser :\n\n```js\nvar chalk = require(\"chalk\");\n\n/* var */\nvar error = chalk.bold.red;\nvar warn = chalk.yellow;\nvar success = chalk.green;\nvar notice = chalk.blue;\n\n/* code */\nconsole.log(warn(\"No command\"));\nconsole.log(notice(\"file modified !\"));\n```\n\n### `exit`\n\nPeu importe comment s'exécute son code, il est important de bien savoir\nmaitriser l'arrêt de son script. Pour ça, `process.exit()` nous sera bien utile.\n\nDans le cas d'une erreur, la valeur de `exit` doit systématiquement être\nsupérieure à 0, et donc bien naturellement en cas de succès, elle doit être\négale à 0.\n\nVoici une [liste des\nvaleurs](http://www.virtsync.com/c-error-codes-include-errno) de `exit` et de\nleurs correspondances.\n\n## Thanks god for our terminal\n\nSi vous souhaitez voir quelques exemples de projets avec des commandes et des\nmises en situations intéressantes, allez faire un tour sur ces projets :\n\n* [cssnext](https://github.com/cssnext/cssnext/blob/9aad8a94eaef5c73f3e925cc63ede6945403a520/src/bin.js)\n* [trash](https://github.com/sindresorhus/trash-cli/blob/master/cli.js)\n\nJe vous invite également à visionner la\n[vidéo](http://blog.clement.delafargue.name/posts/2015-02-25-declarative-cli-parsing-in-js.html)\nde [Clement Delafargue](https://twitter.com/clementd) qui a fait une\nprésentation sur le sujet en début d'année.\n\nÀ partir de là on dispose d'une bonne base pour refaire le monde et accroître la\nflemme du développeur que l'on est en automatisant tout plein de tâches.\n","__filename":"fr/articles/npm/utilitaire-cli/index.md","__url":"/fr/articles/npm/utilitaire-cli/","__resourceUrl":"/fr/articles/npm/utilitaire-cli/index.html","__dataUrl":"/fr/articles/npm/utilitaire-cli/index.html.7653775021aef93c181bdc5dd8fe00aa.json"}