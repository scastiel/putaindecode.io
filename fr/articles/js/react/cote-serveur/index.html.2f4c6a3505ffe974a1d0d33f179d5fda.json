{"head":{"layout":"Post","comments":true,"date":"2015-02-23","title":"Quelques retours sur React et le rendu serveur","tags":["javascript","react"],"authors":["lionelB"],"description":"On entend souvent parler d'applications JavaScript isomorphiques, et même si le nom ne fait pas l'unanimité, ce qu'il y a derrière, le…"},"body":"<p>On entend souvent parler d'applications JavaScript isomorphiques, et même si le\nnom ne <a href=\"https://news.ycombinator.com/item?id=8237449\">fait</a>\n<a href=\"https://twitter.com/wycats/status/566857009836724224\">pas</a>\n<a href=\"https://medium.com/the-thinkmill/making-the-case-for-progressive-javascript-a98dfa82b9d7\">l'unanimité</a>,\nce qu'il y a derrière, le concept de <em>server side rendered JavaScript</em> est en\npasse de devenir un sujet plutôt tendance pour 2015 grâce à la monté en\npuissance de <a href=\"http://facebook.github.io/react/\">Reactjs</a>. Faire du rendu\nd'application JavaScript coté serveur permet de réconcilier enfin le développeur\nde <em>Single Page App</em> (SPA) avec l’amélioration progressive, l'accessibilité et\nle SEO ; quoique Google comme les lecteurs d'écran ont plutôt bien évolué\nsur ce point. L'autre avantage non négligeable à mon sens, est qu'on améliore\nles performances perçues par rapport à une SPA classique puisque :</p>\n<ul>\n<li>On supprime une requête <em>ajax</em> au démarrage pour récupérer le contenu initial.</li>\n<li>On améliore la vitesse de rendu initial de page.</li>\n<li>On bénéficie de la fluidité de navigation d'une SPA.</li>\n</ul>\n<p>Pour plus d'info sur les avantages, il y a <a href=\"http://tech.m6web.fr/isomorphic-single-page-app-parfaite-react-flux/\">cet\narticle</a>\nsur le blog de M6Tech.</p>\n<p>Afin de me familiariser avec React et son écosystème, rien de mieux que mettre\nles mains dedans ! C'est un peu pour toutes ces raisons que j'ai décidé de\nl'utiliser pour mon site web (un site statique).</p>\n<p><strong>Inutile et donc totalement justifié pour le développeur que je suis</strong>. Une des\npremières briques que j'ai mises en place a été le routeur.</p>\n<p>##react-router Pour une fois dans la communauté JavaScript, il y a une\nbibliothèque de référence et c'est celle là :\n<a href=\"https://github.com/rackt/react-router\">react-router</a>. Le routeur est fortement\ninspiré par celui d'Ember au sens où les URL et leurs routes sont au cœur du\ndispositif. Le routeur se présente sous forme de composant React et ça donne ça.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">//routes.js</span>\n\n<span class=\"hljs-keyword\">var</span> React = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"react\"</span>);\n<span class=\"hljs-keyword\">var</span> Router = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"react-router\"</span>);\n\n<span class=\"hljs-keyword\">var</span> Route = Router.Route;\n<span class=\"hljs-keyword\">var</span> DefaultRoute = Router.DefaultRoute;\n<span class=\"hljs-keyword\">var</span> NotFoundRoute = Router.NotFoundRoute;\n\n<span class=\"hljs-keyword\">var</span> App = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./app\"</span>);\n<span class=\"hljs-keyword\">var</span> Home = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./home/homePage\"</span>);\n<span class=\"hljs-keyword\">var</span> Project = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./project/projectPage\"</span>);\n<span class=\"hljs-keyword\">var</span> NotFound = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./notFound\"</span>);\n\n<span class=\"hljs-keyword\">var</span> routes = (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"/\"</span> <span class=\"hljs-attr\">handler</span>=<span class=\"hljs-string\">{App}</span>></span>\n    </span>&#x3C;DefaultRoute name=\"index\" handler={Home} />\n    &#x3C;Route name=\"project\" path=\"/projects/:url\" handler={Project} />\n    &#x3C;NotFoundRoute name=\"404\" handler={NotFound} />\n  &#x3C;/Route>\n);\n\nmodule.exports = routes;</code></pre>\n<p>À mon sens, l'aspect déclaratif apporte de la clarté et améliore la\ncompréhension du système. On voit rapidement quel composant est utilisé en\nfonction de l'URL. L'autre avantage du déclaratif, c'est qu'il permet de manière\nassez simple, d'imbriquer les routes en imbriquant les nœuds <code>&#x3C;Route></code>.</p>\n<p>En plus des composants, on a aussi à disposition des <em>mixins</em> pour naviguer\nprogrammatiquement ou accéder aux infos du routeur (chemin, paramètres, ...)</p>\n<p>Et le gros plus de cette bibliothèque : elle peut aussi s'utiliser coté serveur,\npour la génération des vues et éviter ainsi de dupliquer du code puisqu'on va\npouvoir carrément utiliser tel quel le fichier précédent. Plutôt cool !\nVoici un exemple de <em>middleware</em> pour faire marcher ça dans Express :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> React = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"react\"</span>);\n<span class=\"hljs-keyword\">var</span> Router = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"react-router\"</span>);\n\n<span class=\"hljs-comment\">// notre fichier routes.js</span>\n<span class=\"hljs-keyword\">var</span> routes = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./src/routes\"</span>);\n<span class=\"hljs-comment\">// notre template de page html</span>\n<span class=\"hljs-keyword\">var</span> Html = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./src/html\"</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reactView</span>(<span class=\"hljs-params\">req, res, next</span>) </span>{\n  Router.run(routes, req.url, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">Handler, state</span>) </span>{\n    <span class=\"hljs-comment\">// on récupère les données pour cette vue en fonction de la requête.</span>\n    <span class=\"hljs-keyword\">var</span> data = getViewData(req);\n\n    <span class=\"hljs-comment\">// on génère la soupe au tag avec nos données dedans</span>\n    <span class=\"hljs-keyword\">var</span> markup = React.renderToString(React.createElement(Handler), data);\n\n    <span class=\"hljs-comment\">// on utilise React comme moteur de template</span>\n    <span class=\"hljs-keyword\">var</span> HtmlElement = React.createElement(Html, { <span class=\"hljs-attr\">markup</span>: markup });\n    res.send(<span class=\"hljs-string\">\"&#x3C;!DOCTYPE html>\"</span> + React.renderToStaticMarkup(HtmlElement));\n  });\n}</code></pre>\n<p>Et voici le composant <code>Html.jsx</code> que l'on utilise comme <em>template</em> pour notre\npage principale.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">var</span> React = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"react\"</span>);\n\n<span class=\"hljs-keyword\">var</span> Html = React.createClass({\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n        </span>&#x3C;head>\n          &#x3C;meta charSet=\"utf-8\" />\n          &#x3C;title>Mon site perso&#x3C;/title>\n          &#x3C;script src=\"/js/app.js\" />\n        &#x3C;/head>\n        &#x3C;body>\n          &#x3C;div\n            id=\"react-app\"\n            dangerouslySetInnerHTML={{ __html: this.props.markup }}\n          />\n        &#x3C;/body>\n      &#x3C;/html>\n    );\n  }\n});\n\nmodule.exports = Html;</code></pre>\n<p>Une fois que le code HTML a été généré\nvia<code>React.renderToString(React.createElement(Handler), data);</code>, on pourrait\nutiliser n'importe quel moteur de template (lodash.template, handlebars, ejs,\njade, PHP...) pour générer le HTML de la page à renvoyer. Dans un souci de\nrationalisation des outils, j'ai préféré utiliser React.</p>\n<p>Vous avez dû vous apercevoir qu'on utilise 2 méthodes différentes pour générer\ndu HTML avec React :</p>\n<ul>\n<li><code>React.renderToString(React.createElement(Handler), data);</code></li>\n<li><code>React.renderToStaticMarkup(React.createElement(Handler), data);</code></li>\n</ul>\n<p>La différence entre les deux méthodes est simple. Dans la première, React annote\nles nœuds HTML avec des <code>data-reactid</code> dans le but de pouvoir ensuite reprendre\nla main lorsque votre l'application s'exécutera dans le navigateur. De cette\nmanière, React sait que vous l'initialisez avec un contenu généré depuis le\nserveur. Et si il détecte une différence entre le code existant et celui qu'il\ngénère, vous aurez droit à un <a href=\"https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/browser/ui/__tests__/ReactRenderDocument-test.js#L205-L215\">petit\nwarning</a>.\nLa deuxième méthode permet de générer du code HTML sans annotations, comme\nn'importe quel moteur de <em>template</em>.</p>\n<p>Les plus attentifs auront remarqué qu'on passe les données initiales lors de la\ncréation de l'application via des <em>props</em> React. Quid de l'utilisation de flux\ndans tout ça ?</p>\n<h2 id=\"flux-et-le-rendu-serveur\"><a href=\"#flux-et-le-rendu-serveur\" class=\"phenomic-HeadingAnchor\">#</a>Flux et le rendu serveur</h2>\n<p>Avec <a href=\"http://facebook.github.io/flux/\">Flux</a>, ce sont les stores qui\nmaintiennent l'état de notre application. Si l'on ne veut pas afficher notre\napplication sans aucune données, nous allons devoir préalablement peupler nos\nstores avant d'appeler <code>React.renderToString()</code>.</p>\n<p>Là où ça se corse un peu, c'est qu'il va falloir remplir nos stores avant de\ndémarrer notre application sous peine de voir le message d'alerte dont je\nparlais plus haut. Le plus simple alors est de passer ces données au moteur de\ntemplate, en plus du markup (par exemple sous la forme d'un nœud <code>&#x3C;script type=\"application/json\">JSON DATA&#x3C;/script></code>. Il ne reste plus qu'a récupérer ces\ndonnées avant d’appeler <code>React.render( Application, document.getElementById(\"react-app\"))</code></p>\n<p>Par exemple :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">\"DOMContentLoaded\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) </span>{\n  <span class=\"hljs-comment\">// getData() va récuperer et parser le contenu du tag script</span>\n  <span class=\"hljs-comment\">// qui contient nos données</span>\n  <span class=\"hljs-keyword\">var</span> storeData = getData();\n\n  <span class=\"hljs-comment\">// on déclenche une actions</span>\n  actions.init(storeData);\n\n  <span class=\"hljs-comment\">// on lance le rendu</span>\n  React.render(<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">App</span> /></span>, document.getElementById(\"react-app\"));\n});</span></code></pre>\n<h2 id=\"le-mot-de-la-fin\"><a href=\"#le-mot-de-la-fin\" class=\"phenomic-HeadingAnchor\">#</a>Le mot de la fin</h2>\n<p>Penser son application React pour qu'elle puisse être rendue coté serveur\nintroduit de nouvelles problématiques, notamment avec l'ajout du <em>pattern</em> Flux.\nEn fonction des pages que l'on souhaite afficher, on devra initialiser\ndifférents <em>stores</em>. À nous de déterminer, en fonction de l'URL et du composant\nà afficher, lequel initialiser, et cela, que l'on soit sur le client ou le\nserveur. De la même manière, il faudra être capable de charger nos données,\nindépendamment de l'environnement d’exécution (coucou XHR).</p>\n<p>Un début de réponse se trouve dans les exemples fournis avec react-router.\nL'idée est de passer par une propriété <code>statics</code> lors de la création des\ncomposants React qui seront associés à une <code>&#x3C;Route/></code>.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">var</span> ProjectPage = React.createClass({\n  <span class=\"hljs-attr\">statics</span>: {\n    <span class=\"hljs-attr\">fetchData</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">params</span>)</span>{\n      <span class=\"hljs-keyword\">return</span> api.getPageData(params.url)\n        .then( actions.initProject)\n        .catch( actions.loadProjectError);\n    }\n  }\n ...\n });</code></pre>\n<p>Dans ce bloc <code>statics</code>, on définit une fonction qui servira à récupérer les\ndonnées pour ce composant mais on pourrait très bien imaginer retourner la liste\nd'actions à lancer ou encore les <em>stores</em> à initialiser voire même un\ndescripteur des données nécessaires à la vue (<a href=\"https://www.youtube.com/watch?v=9sc8Pyc51uU\">cf Relay /\nGraphQL</a>)</p>\n<p>Ensuite, lorsque le callback fourni à <code>Router.run()</code> est appelé, il suffit de\nparcourir les <em>Handler</em> pour récupérer les informations contenues dans les blocs\n<code>statics</code>, les traiter et enfin faire <code>React.render()</code>.</p>\n<pre><code class=\"hljs language-Javascript\"><span class=\"hljs-comment\">// On renvoie une promesse qui sera résolue lorsque que toutes les données démandées via fetchData seront reçues.</span>\nRouter.run(routes, Router.HistoryLocation, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">Handler, state</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-built_in\">Promise</span>.all(state.routes\n    .filter(<span class=\"hljs-function\"><span class=\"hljs-params\">route</span> =></span> route.handler.fetchData)  <span class=\"hljs-comment\">// définit fetchData</span>\n    .map(<span class=\"hljs-function\"><span class=\"hljs-params\">route</span> =></span> {\n      <span class=\"hljs-keyword\">return</span> route.handler.fetchData(state.params);\n    })\n  );\n  p.then( <span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =></span> {\n    React.render(<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Handler</span> {<span class=\"hljs-attr\">...state</span>} /></span>, document.getElementById(\"react-app\"))\n  });\n});</span></code></pre>\n<p>Le principe est simple et peut être facilement encapsulé dans un module pour\nêtre partagé entre le client et le serveur. J'espère que cet article vous a\npermis d'appréhender un peu mieux le rendu coté serveur d'une application React.\nN'hésitez pas à laisser des commentaires si vous avez des questions où si vous\nsouhaitez partager vos expériences dans ce domaine.</p>\n<p>Et quelques liens vidéo des sessions de la #reactjsconf :</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=XZfvW1a8Xac\">React.js Conf 2015 - react-router increases your productivity\n</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=z5e7kWSHWTg\">React.js Conf 2015 - Hype!</a> : un\naperçu des possibilités de react-router</li>\n</ul>\n","rawBody":"\nOn entend souvent parler d'applications JavaScript isomorphiques, et même si le\nnom ne [fait](https://news.ycombinator.com/item?id=8237449)\n[pas](https://twitter.com/wycats/status/566857009836724224)\n[l'unanimité](https://medium.com/the-thinkmill/making-the-case-for-progressive-javascript-a98dfa82b9d7),\nce qu'il y a derrière, le concept de _server side rendered JavaScript_ est en\npasse de devenir un sujet plutôt tendance pour 2015 grâce à la monté en\npuissance de [Reactjs](http://facebook.github.io/react/). Faire du rendu\nd'application JavaScript coté serveur permet de réconcilier enfin le développeur\nde _Single Page App_ (SPA) avec l’amélioration progressive, l'accessibilité et\nle SEO&nbsp;; quoique Google comme les lecteurs d'écran ont plutôt bien évolué\nsur ce point. L'autre avantage non négligeable à mon sens, est qu'on améliore\nles performances perçues par rapport à une SPA classique puisque&nbsp;:\n\n* On supprime une requête _ajax_ au démarrage pour récupérer le contenu initial.\n* On améliore la vitesse de rendu initial de page.\n* On bénéficie de la fluidité de navigation d'une SPA.\n\nPour plus d'info sur les avantages, il y a [cet\narticle](http://tech.m6web.fr/isomorphic-single-page-app-parfaite-react-flux/)\nsur le blog de M6Tech.\n\nAfin de me familiariser avec React et son écosystème, rien de mieux que mettre\nles mains dedans&nbsp;! C'est un peu pour toutes ces raisons que j'ai décidé de\nl'utiliser pour mon site web (un site statique).\n\n**Inutile et donc totalement justifié pour le développeur que je suis**. Une des\npremières briques que j'ai mises en place a été le routeur.\n\n##react-router Pour une fois dans la communauté JavaScript, il y a une\nbibliothèque de référence et c'est celle là :\n[react-router](https://github.com/rackt/react-router). Le routeur est fortement\ninspiré par celui d'Ember au sens où les URL et leurs routes sont au cœur du\ndispositif. Le routeur se présente sous forme de composant React et ça donne ça.\n\n```jsx\n//routes.js\n\nvar React = require(\"react\");\nvar Router = require(\"react-router\");\n\nvar Route = Router.Route;\nvar DefaultRoute = Router.DefaultRoute;\nvar NotFoundRoute = Router.NotFoundRoute;\n\nvar App = require(\"./app\");\nvar Home = require(\"./home/homePage\");\nvar Project = require(\"./project/projectPage\");\nvar NotFound = require(\"./notFound\");\n\nvar routes = (\n  <Route path=\"/\" handler={App}>\n    <DefaultRoute name=\"index\" handler={Home} />\n    <Route name=\"project\" path=\"/projects/:url\" handler={Project} />\n    <NotFoundRoute name=\"404\" handler={NotFound} />\n  </Route>\n);\n\nmodule.exports = routes;\n```\n\nÀ mon sens, l'aspect déclaratif apporte de la clarté et améliore la\ncompréhension du système. On voit rapidement quel composant est utilisé en\nfonction de l'URL. L'autre avantage du déclaratif, c'est qu'il permet de manière\nassez simple, d'imbriquer les routes en imbriquant les nœuds `<Route>`.\n\nEn plus des composants, on a aussi à disposition des _mixins_ pour naviguer\nprogrammatiquement ou accéder aux infos du routeur (chemin, paramètres, ...)\n\nEt le gros plus de cette bibliothèque : elle peut aussi s'utiliser coté serveur,\npour la génération des vues et éviter ainsi de dupliquer du code puisqu'on va\npouvoir carrément utiliser tel quel le fichier précédent. Plutôt cool&nbsp;!\nVoici un exemple de _middleware_ pour faire marcher ça dans Express&nbsp;:\n\n```javascript\nvar React = require(\"react\");\nvar Router = require(\"react-router\");\n\n// notre fichier routes.js\nvar routes = require(\"./src/routes\");\n// notre template de page html\nvar Html = require(\"./src/html\");\n\nfunction reactView(req, res, next) {\n  Router.run(routes, req.url, function(Handler, state) {\n    // on récupère les données pour cette vue en fonction de la requête.\n    var data = getViewData(req);\n\n    // on génère la soupe au tag avec nos données dedans\n    var markup = React.renderToString(React.createElement(Handler), data);\n\n    // on utilise React comme moteur de template\n    var HtmlElement = React.createElement(Html, { markup: markup });\n    res.send(\"<!DOCTYPE html>\" + React.renderToStaticMarkup(HtmlElement));\n  });\n}\n```\n\nEt voici le composant `Html.jsx` que l'on utilise comme _template_ pour notre\npage principale.\n\n```jsx\nvar React = require(\"react\");\n\nvar Html = React.createClass({\n  render: function() {\n    return (\n      <html>\n        <head>\n          <meta charSet=\"utf-8\" />\n          <title>Mon site perso</title>\n          <script src=\"/js/app.js\" />\n        </head>\n        <body>\n          <div\n            id=\"react-app\"\n            dangerouslySetInnerHTML={{ __html: this.props.markup }}\n          />\n        </body>\n      </html>\n    );\n  }\n});\n\nmodule.exports = Html;\n```\n\nUne fois que le code HTML a été généré\nvia`React.renderToString(React.createElement(Handler), data);`, on pourrait\nutiliser n'importe quel moteur de template (lodash.template, handlebars, ejs,\njade, PHP...) pour générer le HTML de la page à renvoyer. Dans un souci de\nrationalisation des outils, j'ai préféré utiliser React.\n\nVous avez dû vous apercevoir qu'on utilise 2 méthodes différentes pour générer\ndu HTML avec React&nbsp;:\n\n* `React.renderToString(React.createElement(Handler), data);`\n* `React.renderToStaticMarkup(React.createElement(Handler), data);`\n\nLa différence entre les deux méthodes est simple. Dans la première, React annote\nles nœuds HTML avec des `data-reactid` dans le but de pouvoir ensuite reprendre\nla main lorsque votre l'application s'exécutera dans le navigateur. De cette\nmanière, React sait que vous l'initialisez avec un contenu généré depuis le\nserveur. Et si il détecte une différence entre le code existant et celui qu'il\ngénère, vous aurez droit à un [petit\nwarning](https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/browser/ui/__tests__/ReactRenderDocument-test.js#L205-L215).\nLa deuxième méthode permet de générer du code HTML sans annotations, comme\nn'importe quel moteur de *template*.\n\nLes plus attentifs auront remarqué qu'on passe les données initiales lors de la\ncréation de l'application via des _props_ React. Quid de l'utilisation de flux\ndans tout ça ?\n\n## Flux et le rendu serveur\n\nAvec [Flux](http://facebook.github.io/flux/), ce sont les stores qui\nmaintiennent l'état de notre application. Si l'on ne veut pas afficher notre\napplication sans aucune données, nous allons devoir préalablement peupler nos\nstores avant d'appeler `React.renderToString()`.\n\nLà où ça se corse un peu, c'est qu'il va falloir remplir nos stores avant de\ndémarrer notre application sous peine de voir le message d'alerte dont je\nparlais plus haut. Le plus simple alors est de passer ces données au moteur de\ntemplate, en plus du markup (par exemple sous la forme d'un nœud `<script\ntype=\"application/json\">JSON DATA</script>`. Il ne reste plus qu'a récupérer ces\ndonnées avant d’appeler `React.render( Application,\ndocument.getElementById(\"react-app\"))`\n\nPar exemple&nbsp;:\n\n```javascript\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n  // getData() va récuperer et parser le contenu du tag script\n  // qui contient nos données\n  var storeData = getData();\n\n  // on déclenche une actions\n  actions.init(storeData);\n\n  // on lance le rendu\n  React.render(<App />, document.getElementById(\"react-app\"));\n});\n```\n\n## Le mot de la fin\n\nPenser son application React pour qu'elle puisse être rendue coté serveur\nintroduit de nouvelles problématiques, notamment avec l'ajout du _pattern_ Flux.\nEn fonction des pages que l'on souhaite afficher, on devra initialiser\ndifférents *stores*. À nous de déterminer, en fonction de l'URL et du composant\nà afficher, lequel initialiser, et cela, que l'on soit sur le client ou le\nserveur. De la même manière, il faudra être capable de charger nos données,\nindépendamment de l'environnement d’exécution (coucou XHR).\n\nUn début de réponse se trouve dans les exemples fournis avec react-router.\nL'idée est de passer par une propriété `statics` lors de la création des\ncomposants React qui seront associés à une `<Route/>`.\n\n```jsx\nvar ProjectPage = React.createClass({\n  statics: {\n    fetchData: function(params){\n      return api.getPageData(params.url)\n        .then( actions.initProject)\n        .catch( actions.loadProjectError);\n    }\n  }\n ...\n });\n```\n\nDans ce bloc `statics`, on définit une fonction qui servira à récupérer les\ndonnées pour ce composant mais on pourrait très bien imaginer retourner la liste\nd'actions à lancer ou encore les _stores_ à initialiser voire même un\ndescripteur des données nécessaires à la vue ([cf Relay /\nGraphQL](https://www.youtube.com/watch?v=9sc8Pyc51uU))\n\nEnsuite, lorsque le callback fourni à `Router.run()` est appelé, il suffit de\nparcourir les _Handler_ pour récupérer les informations contenues dans les blocs\n`statics`, les traiter et enfin faire `React.render()`.\n\n```Javascript\n// On renvoie une promesse qui sera résolue lorsque que toutes les données démandées via fetchData seront reçues.\nRouter.run(routes, Router.HistoryLocation, function (Handler, state) {\n  var p = Promise.all(state.routes\n    .filter(route => route.handler.fetchData)  // définit fetchData\n    .map(route => {\n      return route.handler.fetchData(state.params);\n    })\n  );\n  p.then( x => {\n    React.render(<Handler {...state} />, document.getElementById(\"react-app\"))\n  });\n});\n```\n\nLe principe est simple et peut être facilement encapsulé dans un module pour\nêtre partagé entre le client et le serveur. J'espère que cet article vous a\npermis d'appréhender un peu mieux le rendu coté serveur d'une application React.\nN'hésitez pas à laisser des commentaires si vous avez des questions où si vous\nsouhaitez partager vos expériences dans ce domaine.\n\nEt quelques liens vidéo des sessions de la #reactjsconf :\n\n* [React.js Conf 2015 - react-router increases your productivity\n  ](https://www.youtube.com/watch?v=XZfvW1a8Xac)\n* [React.js Conf 2015 - Hype!](https://www.youtube.com/watch?v=z5e7kWSHWTg) : un\n  aperçu des possibilités de react-router\n","__filename":"fr/articles/js/react/cote-serveur/index.md","__url":"/fr/articles/js/react/cote-serveur/","__resourceUrl":"/fr/articles/js/react/cote-serveur/index.html","__dataUrl":"/fr/articles/js/react/cote-serveur/index.html.2f4c6a3505ffe974a1d0d33f179d5fda.json"}