{"head":{"layout":"Post","comments":true,"date":"2015-11-24","title":"Tester unitairement des composants React","tags":["js","react","tests"],"authors":["MoOx"],"header":{"image":"https://farm6.staticflickr.com/5159/7112879347_9e0da289ca_z.jpg","credit":"https://www.flickr.com/photos/dvids/7112879347","linearGradient":"160deg, rgba(0,0,0, .9), rgba(97, 218, 251, .7)"},"description":"L'√©quipe de React a impl√©ment√© une fonctionnalit√© appel√©e shallow rendering (rendu peu profond), qui permet de rendre un composant avec un‚Ä¶"},"body":"<p>L'√©quipe de React a impl√©ment√© une fonctionnalit√© appel√©e <a href=\"http://facebook.github.io/react/docs/test-utils.html#shallow-rendering\">shallow\nrendering</a>\n(rendu peu profond), qui permet de rendre un composant avec un seul niveau de\nprofondeur de rendu.</p>\n<p>Cela permet du coup de v√©rifier ce que le rendu retourne sans avoir √† se soucier\ndu comportement des composants enfants, qui ne sont pas instanci√©s ni rendus.\nCela ne n√©cessite pas de DOM.</p>\n<p>Int√©ressant, n'est-ce pas ? Et d'ailleurs, le <em>shallow rendering</em> est\nactuellement <a href=\"https://discuss.reactjs.org/t/whats-the-prefered-way-to-test-react-js-components/26\">la m√©thode recommand√©e pour tester vos composants\nReact</a>.</p>\n<p>Comme vous pourrez le voir dans un article list√© √† la fin de celui-ci, le code\npermettant de tester des composants avec cette technique n'est pas forc√©ment\ntr√®s concis, contrairement √† ce qu'on pourrait attendre.</p>\n<p>Heureusement, <a href=\"https://github.com/vvo\">quelqu'un</a> a cod√© un truc plut√¥t cool :\n<a href=\"https://github.com/algolia/react-element-to-jsx-string\">react-element-to-jsx-string</a>.\nComme le nom l'indique, cette librairie permet de rendre un composant React en\ntant que cha√Æne JSX.</p>\n<p>C'est maintenant les choses deviennent int√©ressantes : avec ces concepts en t√™te\n(le shallow render et le rendu de composant en strings JSX), on peut facilement\najouter de simple tests unitaires sur ses composants.</p>\n<p><em>Il y a d'autres techniques pour tester des composants React, et la plupart\nimplique le DOM. Vous devrez donc √©xecuter vos tests dans un navigateur (ou en\nutilisant jsdom) : vos tests seront plus lents que la technique qui va suivre\n(qui pour le coup est plus du vrai test unitaire, dans le sens o√π vous utilisez\nmoins de code et ne n√©cessitez pas un gros environnement).</em></p>\n<h2 id=\"tester-facilement-des-composants-react-sans-dom\"><a href=\"#tester-facilement-des-composants-react-sans-dom\" class=\"phenomic-HeadingAnchor\">#</a>Tester facilement des composants React (sans DOM)</h2>\n<p>On va partir avec ce simple composant :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// web_modules/Picture/index.js</span>\n\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { PropTypes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">const</span> Component = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ img, title, Loader, Title }</span>) =></span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n    {(!img || !img.src) &#x26;&#x26; Loader &#x26;&#x26; </span>&#x3C;Loader /><span class=\"xml\">}\n    {img &#x26;&#x26; img.src &#x26;&#x26; </span>&#x3C;img src={img.src} alt={img.alt} />}\n    {title &#x26;&#x26; Title &#x26;&#x26; &#x3C;Title text={title} />}\n  &#x3C;/div>\n);\n\nComponent.propTypes = {\n  img: PropTypes.object,\n  title: PropTypes.string,\n  Loader: PropTypes.func.isRequired,\n  Title: PropTypes.func.isRequired\n};\n\nComponent.displayName = \"Picture\";\n\nexport default Component;</code></pre>\n<p>Ce composant affiche une image avec un composant pour le titre. Si les donn√©es\nde l'image ne sont pas pr√™tes, on peut afficher un composant pour indiquer le\nchargement.</p>\n<p>√âcrivons maintenant un petit test. Pour notre exemple, on va utiliser\n<a href=\"https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4\">tape</a>\ncoupl√© avec <a href=\"https://github.com/atabel/tape-jsx-equals\">tape-jsx-equals</a>, mais\nvous n'aurez pas de mal √† trouver un paquet √† <a href=\"https://www.npmjs.com/search?q=expect+jsx\">votre sauce sur\nnpm</a>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// web_modules/Picture/__tests__/index.js</span>\n\n<span class=\"hljs-keyword\">import</span> tape <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"tape\"</span>;\n<span class=\"hljs-keyword\">import</span> addAssertions <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"extend-tape\"</span>;\n<span class=\"hljs-keyword\">import</span> jsxEquals <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"tape-jsx-equals\"</span>;\n<span class=\"hljs-keyword\">const</span> test = addAssertions(tape, { jsxEquals });\n\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { createRenderer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-addons-test-utils\"</span>;\n\n<span class=\"hljs-keyword\">import</span> Picture <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"..\"</span>;\n\n<span class=\"hljs-comment\">// fixtures (empty and stateless react components)</span>\n<span class=\"hljs-keyword\">const</span> Loader = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> {};\n<span class=\"hljs-keyword\">const</span> Title = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> {};\n\ntest(<span class=\"hljs-string\">\"PageContainer is properly rendered\"</span>, t => {\n  <span class=\"hljs-keyword\">const</span> renderer = createRenderer();\n\n  renderer.render(<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Picture</span> <span class=\"hljs-attr\">Loader</span>=<span class=\"hljs-string\">{Loader}</span> <span class=\"hljs-attr\">Title</span>=<span class=\"hljs-string\">{Title}</span> /></span>);\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    </span>&#x3C;div>\n      &#x3C;Loader />\n    &#x3C;/div><span class=\"xml\">,\n    \"can render a Loader component if no image data are passed\"\n  );\n\n  renderer.render(\n    </span>&#x3C;Picture\n      Loader={Loader}\n      Title={Title}\n      img={{\n        src: \"SRC\",\n        alt: \"ALT\"\n      }}\n    />\n  );\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    &#x3C;div>\n      &#x3C;img src=\"SRC\" alt=\"ALT\" />\n    &#x3C;/div>,\n    \"should render an image if data are passed\"\n  );\n\n  renderer.render(\n    &#x3C;Picture\n      Loader={Loader}\n      Title={Title}\n      img={{\n        src: \"SRC\",\n        alt: \"ALT\"\n      }}\n      title={\"TITLE\"}\n    />\n  );\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    &#x3C;div>\n      &#x3C;img src=\"SRC\" alt=\"ALT\" />\n      &#x3C;Title text=\"TITLE\" />\n    &#x3C;/div>,\n    \"can render a Title if data are passed\"\n  );\n\n  t.end();\n});</code></pre>\n<p>Ces tests sont une couverture minimale pour vous assurer que vous ne cassez rien\nlorsque vous travaillez sur votre composant.</p>\n<p>Comme vous pouvez le constater, les tests sont assez simples √† √©crire et vont\ndroit au but. <strong>Ce qui est int√©ressant ici, c'est que nous ne comparons pas √†\nl'aide de simples cha√Ænes. Nous utilisons directement des composants React.</strong></p>\n<p>Vous pouvez tranquillement ex√©cuter l'exemple complet et le r√©cup√©rer depuis le\nrepository :</p>\n<p><a href=\"https://github.com/MoOx/react-component-unit-testing-example\">github.com/MoOx/react-component-unit-testing-example</a></p>\n<p>Cet exemple contient les commandes et d√©pendances (d√©finies dans le\n<code>package.json</code>) dont vous aurez besoin.</p>\n<h1 id=\"et-comment-tester-les-√©v√®nements-comme-onclick-\"><a href=\"#et-comment-tester-les-%C3%A9v%C3%A8nements-comme-onclick-\" class=\"phenomic-HeadingAnchor\">#</a>Et comment tester les √©v√®nements comme <code>onClick</code> ?</h1>\n<p>Vous n'avez pas √† reproduire le clic compl√®tement.</p>\n<p><strong>Vos tests n'ont pas besoin de v√©rifier que la prop <code>onClick</code> va bien √™tre\nex√©cut√©e lorsque vous cliquerez sur un √©l√©ment du DOM.</strong> <em>React couvre\nprobablement cela dans sa suite de tests.</em></p>\n<p>Ce que vous avez besoin de tester, c'est que la valeur que vous passez au\n<code>onClick</code> fait bien ce que vous voulez. En gros, si vous avez un bout de code\nqui ressemble √† <code>onClick={ yourCallback }</code>, vous n'avez tout simplement qu'√†\nappeler directement <code>yourCallback()</code> dans vos tests juste avant votre\ncomparaison. C'est bien assez !</p>\n<p>Si vous voulez aller un peu plus loin, vous pouvez continuer par lire :</p>\n<ul>\n<li><a href=\"http://simonsmith.io/unit-testing-react-components-without-a-dom/\"><em>Unit testing React components without a\nDOM</em></a>, par\nSimon Smith, qui couvre le m√™me sujet, sans la simplicit√© de la comparaison\nJSX,</li>\n<li><a href=\"https://blog.algolia.com/how-we-unit-test-react-components-using-expect-jsx/\"><em>How we unit test React components using\nexpect-jsx</em></a>\nsur le blog d'Algolia, qui explique pourquoi ils ont choisi et cr√©√© les outils\npour cette approche.</li>\n</ul>\n<p>Avec ces exemples, nous esp√©rons vraiment que vous n'aurez plus peur de tester\nvotre code et que vous n'h√©siterez plus √† couvrir tous vos composants React de\ntests üòç.</p>\n","rawBody":"\nL'√©quipe de React a impl√©ment√© une fonctionnalit√© appel√©e [shallow\nrendering](http://facebook.github.io/react/docs/test-utils.html#shallow-rendering)\n(rendu peu profond), qui permet de rendre un composant avec un seul niveau de\nprofondeur de rendu.\n\nCela permet du coup de v√©rifier ce que le rendu retourne sans avoir √† se soucier\ndu comportement des composants enfants, qui ne sont pas instanci√©s ni rendus.\nCela ne n√©cessite pas de DOM.\n\nInt√©ressant, n'est-ce pas ? Et d'ailleurs, le _shallow rendering_ est\nactuellement [la m√©thode recommand√©e pour tester vos composants\nReact](https://discuss.reactjs.org/t/whats-the-prefered-way-to-test-react-js-components/26).\n\nComme vous pourrez le voir dans un article list√© √† la fin de celui-ci, le code\npermettant de tester des composants avec cette technique n'est pas forc√©ment\ntr√®s concis, contrairement √† ce qu'on pourrait attendre.\n\nHeureusement, [quelqu'un](https://github.com/vvo) a cod√© un truc plut√¥t cool :\n[react-element-to-jsx-string](https://github.com/algolia/react-element-to-jsx-string).\nComme le nom l'indique, cette librairie permet de rendre un composant React en\ntant que cha√Æne JSX.\n\nC'est maintenant les choses deviennent int√©ressantes : avec ces concepts en t√™te\n(le shallow render et le rendu de composant en strings JSX), on peut facilement\najouter de simple tests unitaires sur ses composants.\n\n_Il y a d'autres techniques pour tester des composants React, et la plupart\nimplique le DOM. Vous devrez donc √©xecuter vos tests dans un navigateur (ou en\nutilisant jsdom) : vos tests seront plus lents que la technique qui va suivre\n(qui pour le coup est plus du vrai test unitaire, dans le sens o√π vous utilisez\nmoins de code et ne n√©cessitez pas un gros environnement)._\n\n## Tester facilement des composants React (sans DOM)\n\nOn va partir avec ce simple composant :\n\n```js\n// web_modules/Picture/index.js\n\nimport React from \"react\";\nimport { PropTypes } from \"react\";\n\nconst Component = ({ img, title, Loader, Title }) => (\n  <div>\n    {(!img || !img.src) && Loader && <Loader />}\n    {img && img.src && <img src={img.src} alt={img.alt} />}\n    {title && Title && <Title text={title} />}\n  </div>\n);\n\nComponent.propTypes = {\n  img: PropTypes.object,\n  title: PropTypes.string,\n  Loader: PropTypes.func.isRequired,\n  Title: PropTypes.func.isRequired\n};\n\nComponent.displayName = \"Picture\";\n\nexport default Component;\n```\n\nCe composant affiche une image avec un composant pour le titre. Si les donn√©es\nde l'image ne sont pas pr√™tes, on peut afficher un composant pour indiquer le\nchargement.\n\n√âcrivons maintenant un petit test. Pour notre exemple, on va utiliser\n[tape](https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4)\ncoupl√© avec [tape-jsx-equals](https://github.com/atabel/tape-jsx-equals), mais\nvous n'aurez pas de mal √† trouver un paquet √† [votre sauce sur\nnpm](https://www.npmjs.com/search?q=expect+jsx).\n\n```js\n// web_modules/Picture/__tests__/index.js\n\nimport tape from \"tape\";\nimport addAssertions from \"extend-tape\";\nimport jsxEquals from \"tape-jsx-equals\";\nconst test = addAssertions(tape, { jsxEquals });\n\nimport React from \"react\";\nimport { createRenderer } from \"react-addons-test-utils\";\n\nimport Picture from \"..\";\n\n// fixtures (empty and stateless react components)\nconst Loader = () => {};\nconst Title = () => {};\n\ntest(\"PageContainer is properly rendered\", t => {\n  const renderer = createRenderer();\n\n  renderer.render(<Picture Loader={Loader} Title={Title} />);\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <div>\n      <Loader />\n    </div>,\n    \"can render a Loader component if no image data are passed\"\n  );\n\n  renderer.render(\n    <Picture\n      Loader={Loader}\n      Title={Title}\n      img={{\n        src: \"SRC\",\n        alt: \"ALT\"\n      }}\n    />\n  );\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <div>\n      <img src=\"SRC\" alt=\"ALT\" />\n    </div>,\n    \"should render an image if data are passed\"\n  );\n\n  renderer.render(\n    <Picture\n      Loader={Loader}\n      Title={Title}\n      img={{\n        src: \"SRC\",\n        alt: \"ALT\"\n      }}\n      title={\"TITLE\"}\n    />\n  );\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <div>\n      <img src=\"SRC\" alt=\"ALT\" />\n      <Title text=\"TITLE\" />\n    </div>,\n    \"can render a Title if data are passed\"\n  );\n\n  t.end();\n});\n```\n\nCes tests sont une couverture minimale pour vous assurer que vous ne cassez rien\nlorsque vous travaillez sur votre composant.\n\nComme vous pouvez le constater, les tests sont assez simples √† √©crire et vont\ndroit au but. **Ce qui est int√©ressant ici, c'est que nous ne comparons pas √†\nl'aide de simples cha√Ænes. Nous utilisons directement des composants React.**\n\nVous pouvez tranquillement ex√©cuter l'exemple complet et le r√©cup√©rer depuis le\nrepository :\n\n[github.com/MoOx/react-component-unit-testing-example](https://github.com/MoOx/react-component-unit-testing-example)\n\nCet exemple contient les commandes et d√©pendances (d√©finies dans le\n`package.json`) dont vous aurez besoin.\n\n# Et comment tester les √©v√®nements comme `onClick` ?\n\nVous n'avez pas √† reproduire le clic compl√®tement.\n\n**Vos tests n'ont pas besoin de v√©rifier que la prop `onClick` va bien √™tre\nex√©cut√©e lorsque vous cliquerez sur un √©l√©ment du DOM.** _React couvre\nprobablement cela dans sa suite de tests._\n\nCe que vous avez besoin de tester, c'est que la valeur que vous passez au\n`onClick` fait bien ce que vous voulez. En gros, si vous avez un bout de code\nqui ressemble √† `onClick={ yourCallback }`, vous n'avez tout simplement qu'√†\nappeler directement `yourCallback()` dans vos tests juste avant votre\ncomparaison. C'est bien assez !\n\nSi vous voulez aller un peu plus loin, vous pouvez continuer par lire :\n\n* [_Unit testing React components without a\n  DOM_](http://simonsmith.io/unit-testing-react-components-without-a-dom/), par\n  Simon Smith, qui couvre le m√™me sujet, sans la simplicit√© de la comparaison\n  JSX,\n* [_How we unit test React components using\n  expect-jsx_](https://blog.algolia.com/how-we-unit-test-react-components-using-expect-jsx/)\n  sur le blog d'Algolia, qui explique pourquoi ils ont choisi et cr√©√© les outils\n  pour cette approche.\n\nAvec ces exemples, nous esp√©rons vraiment que vous n'aurez plus peur de tester\nvotre code et que vous n'h√©siterez plus √† couvrir tous vos composants React de\ntests üòç.\n","__filename":"fr/articles/js/react/test-unitaires.md","__url":"/fr/articles/js/react/test-unitaires/","__resourceUrl":"/fr/articles/js/react/test-unitaires/index.html","__dataUrl":"/fr/articles/js/react/test-unitaires/index.html.f39884cd19f1963a60377df26721d799.json"}