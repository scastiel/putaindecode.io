{"head":{"layout":"Post","comments":true,"date":"2014-01-15","title":"BROWSERIFY ALL THE THINGS","tags":["javascript","amd","commonjs","browserify"],"authors":["MoOx"],"description":"Alors que je prends goût à me passer de frameworks (principalement à cause des courbes d'apprentissage et des éventuelles lourdeurs et/ou…"},"body":"<p>Alors que je prends goût à me passer de frameworks (principalement à cause des\ncourbes d'apprentissage et des éventuelles lourdeurs et/ou restrictions que cela\nimpose, mais c'est une autre histoire), je cherchais la meilleure façon d'écrire\ndes micro composants réutilisables.</p>\n<p>Pour le JavaScript, j'ai commencé il y a bien longtemps par des\nextensions/plugins <a href=\"http://prototypejs.org/\">Prototype</a>, puis peu de temps\naprès, du plugins <a href=\"http://plugins.jquery.com/\">jQuery</a> à la pelle. Souvent à\ntord puisque j'utilisais peut être 1% de la librairie en dépendance - exemple\navec mon <a href=\"https://github.com/MoOx/jQuery.Loading-Indicator/\">indicateur de chargement avec\nsémaphore</a> ou encore mon\n<a href=\"https://github.com/MoOx/jQuery.External-Links/\">plugin qui ouvre les liens externes avec du target blank\nautomatique</a>.</p>\n<p><b>Je ne ferais plus jamais ça pour la simple raison du ratio \"poids / %\nd'utilisation\" de la dépendance.</b></p>\n<p>Alors oui, utiliser jQuery a peut-être du bon. Mais s'en passer aussi. <a href=\"/fr/articles/js/de-jquery-a-vanillajs/\">C'est\nfaisable pour pleins de petites choses</a>.\n<a href=\"/fr/articles/js/comment-se-passer-de-libraries-frameworks-javascript/\">Et c'est pas forcément\ndifficile</a>.</p>\n<p>Car si je veux utiliser mon petit script qui ajoute des targets blank\nautomatiquement, devoir inclure jQuery pour si peu, ça fait mal à mes kilobites.</p>\n<p>En attendant <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:modules\">la gestion de modules via\nES6</a>, il nous faut gérer\naujourd'hui nos composants et dépendances à la main. Encore qu'on pourrait faire\nun transpiler pour utiliser cette syntaxe (ça existe déjà, il n'y a qu'à voir\nsur GitHub), mais là on ne ferait que créer une nouvelle définition de module.</p>\n<p>Côté back-end, on a déjà ce qu'il faut en JavaScript avec la gestion <a href=\"http://nodejs.org/api/modules.html\">des\nmodules en Node</a>. Un simple\n<code>require('module')</code> va tenter de récupérer un module avec ce nom. Un module\nn'est rien d'autre qu'un fichier JavaScript. Node va essayer de loader un <code>.js</code>,\npuis <code>.json</code> et enfin <code>.node</code> si besoin), qui lui même peut éventuellement\ncharger d'autres dépendances (les dépendances sont gérées localement) tout en\nprenant en compte les packages NPM. Même si <a href=\"http://nodejs.org/\">Node</a>\nn'implémente pas totalement <a href=\"http://wiki.commonjs.org/wiki/CommonJS\">CommonJS</a>,\nun projet de développement d'une API pour écrire des programmes en JavaScript\nailleurs que dans le navigateur, la façon de faire est assez proche.</p>\n<figure>\n  <img src=\"browserify.png\" alt=\"\" />\n</figure>\n<p>L'idée de <a href=\"http://browserify.org/\">Browserify</a> est d'amener cette façon de faire\ndans le navigateur.</p>\n<p>À côté de ça, vous me direz qu'on a déjà <a href=\"http://requirejs.org/\">RequireJS</a> pour\nun résultat similaire.</p>\n<p>RequireJS implémente l'API AMD (Asynchronous Module Definition), différent de\nl'API CommonJS. Cette API, dérivée de CommonJS, se veut adaptée au navigateur.\nSon principal atout étant le chargement des modules de manière asynchrone. En\nthéorie, c'est super.</p>\n<p>Sauf que dans la pratique (du moins quelque chose de simple et classique, disons\npour l'exemple du petit JavaScript pour améliorer une page web, ou encore une\nsimple <em>single page webapp</em> (SPA)) ce n'est pas forcément pertinent.</p>\n<p>En effet charger des modules de manières asynchrones n'est forcément pas\noptimisé lorsqu'il s'agit de faire des pages qui se chargent rapidement. Il\nsuffit de penser aux problématiques de débits selon la vitesse de la connexion\nau réseau (Edge, faible 3G...) et donc nombre de requêtes HTTP qui peuvent nous\nfaire souffrir de gros ralentissement pour se rendre compte que cela peut poser\nproblème.</p>\n<p>En plus de cela, je trouve personnellement dégueulasse la façon de déclarer les\nmodules AMD, mais ça ce n'est qu'un détail.</p>\n<p>Comparons les différentes méthodes comme on nous les montre sur le site de\n<a href=\"http://requirejs.org/docs/whyamd.html\">RequireJS</a> :</p>\n<p>Le web aujourd'hui:</p>\n<pre><code class=\"hljs language-js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> $ = <span class=\"hljs-keyword\">this</span>.jQuery;\n\n  <span class=\"hljs-keyword\">this</span>.myExample = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n})();</code></pre>\n<p>AMD:</p>\n<pre><code class=\"hljs language-js\">define([<span class=\"hljs-string\">\"jquery\"</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">$</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n});</code></pre>\n<p>CommonJS:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> $ = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"jquery\"</span>);\nexports.myExample = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};</code></pre>\n<p>AMD et CommonJS utilisent tout les deux une identification par chaîne de\ncaractères. Il faut bien que ces chaînes soient déclarées quelque part.</p>\n<p>Côté RequireJS (AMD), on doit éventuellement mapper toutes ces chaînes à la\nmain, dans le fichier configuration. De plus la déclaration des dépendances se\nfaisant dans l'entête du module, ça peut devenir lourd :</p>\n<pre><code class=\"hljs language-js\">define(\n  [\n    <span class=\"hljs-string\">\"require\"</span>,\n    <span class=\"hljs-string\">\"jquery\"</span>,\n    <span class=\"hljs-string\">\"blade/object\"</span>,\n    <span class=\"hljs-string\">\"blade/fn\"</span>,\n    <span class=\"hljs-string\">\"rdapi\"</span>,\n    <span class=\"hljs-string\">\"oauth\"</span>,\n    <span class=\"hljs-string\">\"blade/jig\"</span>,\n    <span class=\"hljs-string\">\"blade/url\"</span>,\n    <span class=\"hljs-string\">\"dispatch\"</span>,\n    <span class=\"hljs-string\">\"accounts\"</span>,\n    <span class=\"hljs-string\">\"storage\"</span>,\n    <span class=\"hljs-string\">\"services\"</span>,\n    <span class=\"hljs-string\">\"widgets/AccountPanel\"</span>,\n    <span class=\"hljs-string\">\"widgets/TabButton\"</span>,\n    <span class=\"hljs-string\">\"widgets/AddAccount\"</span>,\n    <span class=\"hljs-string\">\"less\"</span>,\n    <span class=\"hljs-string\">\"osTheme\"</span>,\n    <span class=\"hljs-string\">\"jquery-ui-1.8.7.min\"</span>,\n    <span class=\"hljs-string\">\"jquery.textOverflow\"</span>\n  ],\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">\n    require,\n    $,\n    object,\n    fn,\n    rdapi,\n    oauth,\n    jig,\n    url,\n    dispatch,\n    accounts,\n    storage,\n    services,\n    AccountPanel,\n    TabButton,\n    AddAccount,\n    less,\n    osTheme\n  </span>) </span>{\n    <span class=\"hljs-comment\">// ici le corps de la fonction</span>\n  }\n);</code></pre>\n<p>Bon vous me direz que si un module a autant de dépendances, il y a peut être un\nproblème en amont et vous n'aurez pas tort.</p>\n<p>Côté Browserify (CommonJS like), les dépendances externes proviennent (à la\nbase) de NPM. On a donc rien à mapper nul part. Puis pour avoir un module local,\nil suffit de faire un <code>require('./mon/module')</code>, et Browserify se chargera de\nrégler la dépendance (et je vous montre encore mieux après).</p>\n<p>RequireJS propose un \"optimizer\", qui au final ne fait que supprimer son point\nfort: le côté asynchrone du téléchargement des modules. Du coup on se retrouve\navec tout RequireJS dans la source ET toutes les dépendances avec le mapping. Il\ny a bien une façon de vraiment optimiser par bundle quand on cherche un peu dans\nla doc, mais <a href=\"http://requirejs.org/docs/optimization.html#wholemultipage\">ça n'est pas vraiment mis en\navant</a>. Il existe\naussi <a href=\"https://github.com/jrburke/almond\">Almond.js</a> qui se veut être plus\nléger, mais du coup, utiliser RequireJS pour optimiser avec Almond, je ne trouve\npas ça cohérent.</p>\n<p>Si jusque là, Browserify vous intéresse (plus car les autres solutions ne vous\nintéressent pas), attaquons le corps du sujet.</p>\n<h2 id=\"installation-de-browserify\"><a href=\"#installation-de-browserify\" class=\"phenomic-HeadingAnchor\">#</a>Installation de Browserify</h2>\n<p>Si vous souhaitez accéder à la commande via le terminal, la chose la plus simple\nà faire est d'installer le paquet en global.</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> npm install -g browserify</span></code></pre>\n<p>Si vous ne l'installez pas en global (sans l'option <code>-g</code>, vous aurez la commande\naccessible dans <code>./node_modules/.bin/browserify</code>). Mais selon votre workflow,\nvous pouvez l'utiliser via une tâche\n<a href=\"https://www.npmjs.org/package/grunt-browserify\">grunt-browserify</a> ou\n<a href=\"https://www.npmjs.org/package/gulp-browserify\">gulp-browserify</a>.</p>\n<h2 id=\"utilisation-de-browserify\"><a href=\"#utilisation-de-browserify\" class=\"phenomic-HeadingAnchor\">#</a>Utilisation de Browserify</h2>\n<p>Partons d'un simple fichier <code>main.js</code>:</p>\n<pre><code class=\"hljs language-js\">alert(<span class=\"hljs-string\">\"Hello world !\"</span>);</code></pre>\n<p>Sans aucune dépendance, ça n'a que peu de sens, mais c'est plus pour montrer un\ndernier point intéressant.</p>\n<p>Je le compile avec la commande suivante:</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> browserify main.js -o bundle.js</span></code></pre>\n<p>J'obtiens le fichier suivant.</p>\n<pre><code class=\"hljs language-js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">e</span>(<span class=\"hljs-params\">t, n, r</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">s</span>(<span class=\"hljs-params\">o, u</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!n[o]) {\n      <span class=\"hljs-keyword\">if</span> (!t[o]) {\n        <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">require</span> == <span class=\"hljs-string\">\"function\"</span> &#x26;&#x26; <span class=\"hljs-built_in\">require</span>;\n        <span class=\"hljs-keyword\">if</span> (!u &#x26;&#x26; a) <span class=\"hljs-keyword\">return</span> a(o, !<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">if</span> (i) <span class=\"hljs-keyword\">return</span> i(o, !<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Cannot find module '\"</span> + o + <span class=\"hljs-string\">\"'\"</span>);\n      }\n      <span class=\"hljs-keyword\">var</span> f = (n[o] = { <span class=\"hljs-attr\">exports</span>: {} });\n      t[o][<span class=\"hljs-number\">0</span>].call(\n        f.exports,\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n          <span class=\"hljs-keyword\">var</span> n = t[o][<span class=\"hljs-number\">1</span>][e];\n          <span class=\"hljs-keyword\">return</span> s(n ? n : e);\n        },\n        f,\n        f.exports,\n        e,\n        t,\n        n,\n        r\n      );\n    }\n    <span class=\"hljs-keyword\">return</span> n[o].exports;\n  }\n  <span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">require</span> == <span class=\"hljs-string\">\"function\"</span> &#x26;&#x26; <span class=\"hljs-built_in\">require</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> o = <span class=\"hljs-number\">0</span>; o &#x3C; r.length; o++) s(r[o]);\n  <span class=\"hljs-keyword\">return</span> s;\n})(\n  {\n    <span class=\"hljs-number\">1</span>: [\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">require, module, exports</span>) </span>{\n        alert(<span class=\"hljs-string\">\"Hello world !\"</span>);\n      },\n      {}\n    ]\n  },\n  {},\n  [<span class=\"hljs-number\">1</span>]\n);</code></pre>\n<p>On reconnaît notre ligne en plein milieu. Avec un ajout conséquent. Ça peut\nparaître beaucoup, mais c'est rien comparé à la <a href=\"http://requirejs.org/docs/release/2.1.10/minified/require.js\">source de\nRequireJS</a></p>\n<p>Bon du coup partons avec un exemple peut être plus représentatif qu'on peut voir\nsur la homepage de Browserify.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./foo\"</span>);\n<span class=\"hljs-keyword\">var</span> gamma = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gamma\"</span>);\n\n<span class=\"hljs-keyword\">var</span> n = gamma(foo(<span class=\"hljs-number\">5</span>) * <span class=\"hljs-number\">3</span>);\n<span class=\"hljs-keyword\">var</span> txt = <span class=\"hljs-built_in\">document</span>.createTextNode(n);\n<span class=\"hljs-built_in\">document</span>.body.appendChild(txt);</code></pre>\n<p>Ici on aura en plus <code>foo.js</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> n * <span class=\"hljs-number\">11</span>;\n};</code></pre>\n<p>Et le module <code>gamma</code> qu'on a installé depuis NPM</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> npm i gamma</span></code></pre>\n<p><small><i><code>i</code> est l'alias de <code>install</code>.</i></small></p>\n<p>Avec la même commande que précédement (et donc le même ajout), Browserify va\nparser l'arbre syntaxique abstrait (AST) des appels à <code>require()</code> et va créer un\ngraph des dépendances du projet. Une fois ceci fait, il va simplement ajuster\nles chemins et déclarer les fonctions mappées dans un object par leur\nidentifiant. Lorsqu'une fonction appelle <code>require</code>, le petit bout de script\najouté va se charger de retourner la dépendance.</p>\n<p>Notez qu'on peut aussi simplement utiliser une redirection de sortie de commande\npour gérer le fichier final:</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> browserify main.js > bundle.js</span></code></pre>\n<p>Du coup on a plus qu'à utiliser une simple balise <code>&#x3C;script></code> pour incorporer ça\ndans nos pages web.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"bundle.js\"</span>></span><span class=\"null\"></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></code></pre>\n<h2 id=\"les-transformations-avec-browserify\"><a href=\"#les-transformations-avec-browserify\" class=\"phenomic-HeadingAnchor\">#</a>Les transformations avec Browserify</h2>\n<p>Tant qu'à utiliser un outil, autant l'exploiter jusqu'au bout. Car pour\nl'instant je n'ai parlé que de NPM. Que faire si mon module n'est pas sur NPM ?\nBon déjà je double check, car maintenant la plupart des librairies y sont\n(jQuery, Backbone et Jean passe). Si ce n'est pas le cas, je pourrais toujours\nfaire <code>npm i https//adresse.git</code> mais si le paquet n'a pas de <code>package.json</code>\navec le <code>main</code> bien rempli, ça ne va pas forcément être le mieux.</p>\n<p>Cela dit, si mon paquet est prévu pour Bower par exemple, il existe une\n<i>transformation</i> prévue pour aider Browserify à résoudre les références aux\npaquets pour les consommer depuis Bower: <code>debowerify</code>. Dans le même esprit, on\nva retrouver de nombreuses transformations telles que :</p>\n<ul>\n<li><code>decomponentify</code>: pour consommer des\n<a href=\"https://github.com/component/component\">component</a>s,</li>\n<li><code>deamdify</code>: pour consommer des modules AMD,</li>\n<li><code>deglobalify</code>: pour consommer des modules qui utilisent des variables\nglobales,</li>\n<li><code>jadeify</code>: pour consommer des fichiers de templates jade,</li>\n<li><code>hbsify</code>: pour consommer des fichiers de templates handlebars,</li>\n<li><code>es6ify</code>: pour écrire du JavaScript ES6 (compilé en ES5),</li>\n<li><code>uglifyify</code>: appliquer uglify.</li>\n</ul>\n<p>Il existe plein <a href=\"https://www.npmjs.org/browse/keyword/browserify\">d'autres\ntransformations</a> qui\ns'adapteront sûrement à vos besoins.</p>\n<p>Du coup la ligne ultime pour consommer a peu près n'importe quel module :</p>\n<pre><code class=\"hljs language-console\">browserify -t debowerify -t decomponentify -t deamdify -t deglobalify -t es6ify main.js > bundle.js</code></pre>\n<p>L'équivalent avec les tâches Grunt ou Gulp sera tout aussi simple via un\ntableau. Pensez bien à installer ces dépendances avant:</p>\n<pre><code class=\"hljs language-console\">npm install debowerify decomponentify deamdify deglobalify es6ify --save</code></pre>\n<h2 id=\"ecrire-un-module-pour-browserify-mais-pas-que\"><a href=\"#ecrire-un-module-pour-browserify-mais-pas-que\" class=\"phenomic-HeadingAnchor\">#</a>Ecrire un module pour Browserify (mais pas que)</h2>\n<p>Consommer c'est bien, mais faire c'est <del>mieux</del> bien aussi.</p>\n<figure>\n  <img src=\"browserify-potter.png\" alt=\"\" />\n</figure>\n<p>Tout droit sorti de <a href=\"https://github.com/umdjs/umd\">UMD</a> (Universal Module\nDefinition), voici un wrapper qui vous permettra de créer votre module\ncompatible avec CommonJS, AMD et pour les projets old school !</p>\n<pre><code class=\"hljs language-js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, factory</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> exports === <span class=\"hljs-string\">\"object\"</span>) {\n    <span class=\"hljs-comment\">// CommonJS</span>\n    <span class=\"hljs-built_in\">module</span>.exports = factory(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"b\"</span>));\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> define === <span class=\"hljs-string\">\"function\"</span> &#x26;&#x26; define.amd) {\n    <span class=\"hljs-comment\">// AMD</span>\n    define([<span class=\"hljs-string\">\"b\"</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">b</span>) </span>{\n      <span class=\"hljs-keyword\">return</span> (root.returnExportsGlobal = factory(b));\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Global Variables</span>\n    root.returnExportsGlobal = factory(root.b);\n  }\n})(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">b</span>) </span>{\n  <span class=\"hljs-comment\">// Ici votre module (fonction, objet, whatever...)</span>\n  <span class=\"hljs-keyword\">return</span> {};\n});</code></pre>\n<p>Il existe bien sur <a href=\"https://github.com/umdjs/umd#variations\">plusieurs façons de\nfaire</a> selon vos critères. À vous de\nchoisir.</p>\n<p>Maintenant vous allez pouvoir consommer et écrire des modules facilement, et\nsans vous prendre la tête.</p>\n<p>Bisous.</p>\n<p><em>PS: pour tester browserify en live, c'est sur\n<a href=\"http://requirebin.com/\">requirebin.com</a>.</em></p>\n","rawBody":"\nAlors que je prends goût à me passer de frameworks (principalement à cause des\ncourbes d'apprentissage et des éventuelles lourdeurs et/ou restrictions que cela\nimpose, mais c'est une autre histoire), je cherchais la meilleure façon d'écrire\ndes micro composants réutilisables.\n\nPour le JavaScript, j'ai commencé il y a bien longtemps par des\nextensions/plugins [Prototype](http://prototypejs.org/), puis peu de temps\naprès, du plugins [jQuery](http://plugins.jquery.com/) à la pelle. Souvent à\ntord puisque j'utilisais peut être 1% de la librairie en dépendance - exemple\navec mon [indicateur de chargement avec\nsémaphore](https://github.com/MoOx/jQuery.Loading-Indicator/) ou encore mon\n[plugin qui ouvre les liens externes avec du target blank\nautomatique](https://github.com/MoOx/jQuery.External-Links/).\n\n<b>Je ne ferais plus jamais ça pour la simple raison du ratio \"poids / %\nd'utilisation\" de la dépendance.</b>\n\nAlors oui, utiliser jQuery a peut-être du bon. Mais s'en passer aussi. [C'est\nfaisable pour pleins de petites choses](/fr/articles/js/de-jquery-a-vanillajs/).\n[Et c'est pas forcément\ndifficile](/fr/articles/js/comment-se-passer-de-libraries-frameworks-javascript/).\n\nCar si je veux utiliser mon petit script qui ajoute des targets blank\nautomatiquement, devoir inclure jQuery pour si peu, ça fait mal à mes kilobites.\n\nEn attendant [la gestion de modules via\nES6](http://wiki.ecmascript.org/doku.php?id=harmony:modules), il nous faut gérer\naujourd'hui nos composants et dépendances à la main. Encore qu'on pourrait faire\nun transpiler pour utiliser cette syntaxe (ça existe déjà, il n'y a qu'à voir\nsur GitHub), mais là on ne ferait que créer une nouvelle définition de module.\n\nCôté back-end, on a déjà ce qu'il faut en JavaScript avec la gestion [des\nmodules en Node](http://nodejs.org/api/modules.html). Un simple\n`require('module')` va tenter de récupérer un module avec ce nom. Un module\nn'est rien d'autre qu'un fichier JavaScript. Node va essayer de loader un `.js`,\npuis `.json` et enfin `.node` si besoin), qui lui même peut éventuellement\ncharger d'autres dépendances (les dépendances sont gérées localement) tout en\nprenant en compte les packages NPM. Même si [Node](http://nodejs.org/)\nn'implémente pas totalement [CommonJS](http://wiki.commonjs.org/wiki/CommonJS),\nun projet de développement d'une API pour écrire des programmes en JavaScript\nailleurs que dans le navigateur, la façon de faire est assez proche.\n\n<figure>\n  <img src=\"browserify.png\" alt=\"\" />\n</figure>\n\nL'idée de [Browserify](http://browserify.org/) est d'amener cette façon de faire\ndans le navigateur.\n\nÀ côté de ça, vous me direz qu'on a déjà [RequireJS](http://requirejs.org/) pour\nun résultat similaire.\n\nRequireJS implémente l'API AMD (Asynchronous Module Definition), différent de\nl'API CommonJS. Cette API, dérivée de CommonJS, se veut adaptée au navigateur.\nSon principal atout étant le chargement des modules de manière asynchrone. En\nthéorie, c'est super.\n\nSauf que dans la pratique (du moins quelque chose de simple et classique, disons\npour l'exemple du petit JavaScript pour améliorer une page web, ou encore une\nsimple <em>single page webapp</em> (SPA)) ce n'est pas forcément pertinent.\n\nEn effet charger des modules de manières asynchrones n'est forcément pas\noptimisé lorsqu'il s'agit de faire des pages qui se chargent rapidement. Il\nsuffit de penser aux problématiques de débits selon la vitesse de la connexion\nau réseau (Edge, faible 3G...) et donc nombre de requêtes HTTP qui peuvent nous\nfaire souffrir de gros ralentissement pour se rendre compte que cela peut poser\nproblème.\n\nEn plus de cela, je trouve personnellement dégueulasse la façon de déclarer les\nmodules AMD, mais ça ce n'est qu'un détail.\n\nComparons les différentes méthodes comme on nous les montre sur le site de\n[RequireJS](http://requirejs.org/docs/whyamd.html) :\n\nLe web aujourd'hui:\n\n```js\n(function() {\n  var $ = this.jQuery;\n\n  this.myExample = function() {};\n})();\n```\n\nAMD:\n\n```js\ndefine([\"jquery\"], function($) {\n  return function() {};\n});\n```\n\nCommonJS:\n\n```js\nvar $ = require(\"jquery\");\nexports.myExample = function() {};\n```\n\nAMD et CommonJS utilisent tout les deux une identification par chaîne de\ncaractères. Il faut bien que ces chaînes soient déclarées quelque part.\n\nCôté RequireJS (AMD), on doit éventuellement mapper toutes ces chaînes à la\nmain, dans le fichier configuration. De plus la déclaration des dépendances se\nfaisant dans l'entête du module, ça peut devenir lourd :\n\n```js\ndefine(\n  [\n    \"require\",\n    \"jquery\",\n    \"blade/object\",\n    \"blade/fn\",\n    \"rdapi\",\n    \"oauth\",\n    \"blade/jig\",\n    \"blade/url\",\n    \"dispatch\",\n    \"accounts\",\n    \"storage\",\n    \"services\",\n    \"widgets/AccountPanel\",\n    \"widgets/TabButton\",\n    \"widgets/AddAccount\",\n    \"less\",\n    \"osTheme\",\n    \"jquery-ui-1.8.7.min\",\n    \"jquery.textOverflow\"\n  ],\n  function(\n    require,\n    $,\n    object,\n    fn,\n    rdapi,\n    oauth,\n    jig,\n    url,\n    dispatch,\n    accounts,\n    storage,\n    services,\n    AccountPanel,\n    TabButton,\n    AddAccount,\n    less,\n    osTheme\n  ) {\n    // ici le corps de la fonction\n  }\n);\n```\n\nBon vous me direz que si un module a autant de dépendances, il y a peut être un\nproblème en amont et vous n'aurez pas tort.\n\nCôté Browserify (CommonJS like), les dépendances externes proviennent (à la\nbase) de NPM. On a donc rien à mapper nul part. Puis pour avoir un module local,\nil suffit de faire un `require('./mon/module')`, et Browserify se chargera de\nrégler la dépendance (et je vous montre encore mieux après).\n\nRequireJS propose un \"optimizer\", qui au final ne fait que supprimer son point\nfort: le côté asynchrone du téléchargement des modules. Du coup on se retrouve\navec tout RequireJS dans la source ET toutes les dépendances avec le mapping. Il\ny a bien une façon de vraiment optimiser par bundle quand on cherche un peu dans\nla doc, mais [ça n'est pas vraiment mis en\navant](http://requirejs.org/docs/optimization.html#wholemultipage). Il existe\naussi [Almond.js](https://github.com/jrburke/almond) qui se veut être plus\nléger, mais du coup, utiliser RequireJS pour optimiser avec Almond, je ne trouve\npas ça cohérent.\n\nSi jusque là, Browserify vous intéresse (plus car les autres solutions ne vous\nintéressent pas), attaquons le corps du sujet.\n\n## Installation de Browserify\n\nSi vous souhaitez accéder à la commande via le terminal, la chose la plus simple\nà faire est d'installer le paquet en global.\n\n```console\n$ npm install -g browserify\n```\n\nSi vous ne l'installez pas en global (sans l'option `-g`, vous aurez la commande\naccessible dans `./node_modules/.bin/browserify`). Mais selon votre workflow,\nvous pouvez l'utiliser via une tâche\n[grunt-browserify](https://www.npmjs.org/package/grunt-browserify) ou\n[gulp-browserify](https://www.npmjs.org/package/gulp-browserify).\n\n## Utilisation de Browserify\n\nPartons d'un simple fichier `main.js`:\n\n```js\nalert(\"Hello world !\");\n```\n\nSans aucune dépendance, ça n'a que peu de sens, mais c'est plus pour montrer un\ndernier point intéressant.\n\nJe le compile avec la commande suivante:\n\n```console\n$ browserify main.js -o bundle.js\n```\n\nJ'obtiens le fichier suivant.\n\n```js\n(function e(t, n, r) {\n  function s(o, u) {\n    if (!n[o]) {\n      if (!t[o]) {\n        var a = typeof require == \"function\" && require;\n        if (!u && a) return a(o, !0);\n        if (i) return i(o, !0);\n        throw new Error(\"Cannot find module '\" + o + \"'\");\n      }\n      var f = (n[o] = { exports: {} });\n      t[o][0].call(\n        f.exports,\n        function(e) {\n          var n = t[o][1][e];\n          return s(n ? n : e);\n        },\n        f,\n        f.exports,\n        e,\n        t,\n        n,\n        r\n      );\n    }\n    return n[o].exports;\n  }\n  var i = typeof require == \"function\" && require;\n  for (var o = 0; o < r.length; o++) s(r[o]);\n  return s;\n})(\n  {\n    1: [\n      function(require, module, exports) {\n        alert(\"Hello world !\");\n      },\n      {}\n    ]\n  },\n  {},\n  [1]\n);\n```\n\nOn reconnaît notre ligne en plein milieu. Avec un ajout conséquent. Ça peut\nparaître beaucoup, mais c'est rien comparé à la [source de\nRequireJS](http://requirejs.org/docs/release/2.1.10/minified/require.js)\n\nBon du coup partons avec un exemple peut être plus représentatif qu'on peut voir\nsur la homepage de Browserify.\n\n```js\nvar foo = require(\"./foo\");\nvar gamma = require(\"gamma\");\n\nvar n = gamma(foo(5) * 3);\nvar txt = document.createTextNode(n);\ndocument.body.appendChild(txt);\n```\n\nIci on aura en plus `foo.js`\n\n```js\nmodule.exports = function(n) {\n  return n * 11;\n};\n```\n\nEt le module `gamma` qu'on a installé depuis NPM\n\n```console\n$ npm i gamma\n```\n\n<small><i>`i` est l'alias de `install`.</i></small>\n\nAvec la même commande que précédement (et donc le même ajout), Browserify va\nparser l'arbre syntaxique abstrait (AST) des appels à `require()` et va créer un\ngraph des dépendances du projet. Une fois ceci fait, il va simplement ajuster\nles chemins et déclarer les fonctions mappées dans un object par leur\nidentifiant. Lorsqu'une fonction appelle `require`, le petit bout de script\najouté va se charger de retourner la dépendance.\n\nNotez qu'on peut aussi simplement utiliser une redirection de sortie de commande\npour gérer le fichier final:\n\n```console\n$ browserify main.js > bundle.js\n```\n\nDu coup on a plus qu'à utiliser une simple balise `<script>` pour incorporer ça\ndans nos pages web.\n\n```html\n<script src=\"bundle.js\"></script>\n```\n\n## Les transformations avec Browserify\n\nTant qu'à utiliser un outil, autant l'exploiter jusqu'au bout. Car pour\nl'instant je n'ai parlé que de NPM. Que faire si mon module n'est pas sur NPM ?\nBon déjà je double check, car maintenant la plupart des librairies y sont\n(jQuery, Backbone et Jean passe). Si ce n'est pas le cas, je pourrais toujours\nfaire `npm i https//adresse.git` mais si le paquet n'a pas de `package.json`\navec le `main` bien rempli, ça ne va pas forcément être le mieux.\n\nCela dit, si mon paquet est prévu pour Bower par exemple, il existe une\n<i>transformation</i> prévue pour aider Browserify à résoudre les références aux\npaquets pour les consommer depuis Bower: `debowerify`. Dans le même esprit, on\nva retrouver de nombreuses transformations telles que :\n\n* `decomponentify`: pour consommer des\n  [component](https://github.com/component/component)s,\n* `deamdify`: pour consommer des modules AMD,\n* `deglobalify`: pour consommer des modules qui utilisent des variables\n  globales,\n* `jadeify`: pour consommer des fichiers de templates jade,\n* `hbsify`: pour consommer des fichiers de templates handlebars,\n* `es6ify`: pour écrire du JavaScript ES6 (compilé en ES5),\n* `uglifyify`: appliquer uglify.\n\nIl existe plein [d'autres\ntransformations](https://www.npmjs.org/browse/keyword/browserify) qui\ns'adapteront sûrement à vos besoins.\n\nDu coup la ligne ultime pour consommer a peu près n'importe quel module :\n\n```console\nbrowserify -t debowerify -t decomponentify -t deamdify -t deglobalify -t es6ify main.js > bundle.js\n```\n\nL'équivalent avec les tâches Grunt ou Gulp sera tout aussi simple via un\ntableau. Pensez bien à installer ces dépendances avant:\n\n```console\nnpm install debowerify decomponentify deamdify deglobalify es6ify --save\n```\n\n## Ecrire un module pour Browserify (mais pas que)\n\nConsommer c'est bien, mais faire c'est <del>mieux</del> bien aussi.\n\n<figure>\n  <img src=\"browserify-potter.png\" alt=\"\" />\n</figure>\n\nTout droit sorti de [UMD](https://github.com/umdjs/umd) (Universal Module\nDefinition), voici un wrapper qui vous permettra de créer votre module\ncompatible avec CommonJS, AMD et pour les projets old school !\n\n```js\n(function(root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = factory(require(\"b\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"b\"], function(b) {\n      return (root.returnExportsGlobal = factory(b));\n    });\n  } else {\n    // Global Variables\n    root.returnExportsGlobal = factory(root.b);\n  }\n})(this, function(b) {\n  // Ici votre module (fonction, objet, whatever...)\n  return {};\n});\n```\n\nIl existe bien sur [plusieurs façons de\nfaire](https://github.com/umdjs/umd#variations) selon vos critères. À vous de\nchoisir.\n\nMaintenant vous allez pouvoir consommer et écrire des modules facilement, et\nsans vous prendre la tête.\n\nBisous.\n\n_PS: pour tester browserify en live, c'est sur\n[requirebin.com](http://requirebin.com/)._\n","__filename":"fr/articles/js/browserify/index.md","__url":"/fr/articles/js/browserify/","__resourceUrl":"/fr/articles/js/browserify/index.html","__dataUrl":"/fr/articles/js/browserify/index.html.7360225f45b9b94453d71ba1c21e6f9e.json"}