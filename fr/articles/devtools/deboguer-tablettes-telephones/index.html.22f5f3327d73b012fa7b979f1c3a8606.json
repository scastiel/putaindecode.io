{"head":{"layout":"Post","comments":true,"date":"2015-05-19","title":"Comment déboguer facilement du web y compris sur tablettes et téléphones","tags":["debug","frontend"],"authors":["kud"],"header":{"credit":"https://www.flickr.com/photos/adactio/6153558098"},"description":"Vous souhaitez déboguer votre site ou application web mais vous ne savez pas trop comment faire ? Bon. Je sais que vous savez mais je peux…"},"body":"<p>Vous souhaitez déboguer votre site ou application web mais vous ne savez pas\ntrop comment faire ? Bon. Je sais que vous savez mais je peux peut-être vous\nfaciliter la tâche.</p>\n<p>Commençons par le plus simple.</p>\n<h2 id=\"un-navigateur-un-inspecteur\"><a href=\"#un-navigateur-un-inspecteur\" class=\"phenomic-HeadingAnchor\">#</a>Un navigateur, un inspecteur</h2>\n<p>Si vous ne voulez pas vous prendre la tête, la solution la plus simple reste\nd'utiliser l'inspecteur fourni par votre navigateur pour analyser vos pages web.\nFini les add-ons à installer (comme Firebug), chaque navigateur récent a\nmaintenant son propre inspecteur, même Internet Explorer.</p>\n<p>Ça, c'est la partie que vous devez sûrement déjà savoir. Par contre, quid du\nmobile ?</p>\n<h3 id=\"oui-quid-du-mobile-\"><a href=\"#oui-quid-du-mobile-\" class=\"phenomic-HeadingAnchor\">#</a>Oui, quid du mobile ?</h3>\n<p>C'est justement principalement ce qui m'intéresse ici.</p>\n<p>Pour ce qui est du mobile, je vous propose de commencer par brancher votre\ntéléphone ou tablette sur votre poste en USB puis de lancer deux navigateurs.\nMais pas n'importe lesquels. Les mêmes navigateurs sur desktop et sur mobile.\nPar exemple, si vous voulez déboguer Safari sur iOS, alors lancez Safari sur\nvotre Mac. Si vous voulez déboguer Chrome sur Android, alors lancez Chrome sur\nvotre desktop. Ce n'est vraiment plus aussi compliqué qu'auparavant où il était\nnécessaire d'installer des applications en ligne de commande (comme\n<a href=\"https://developer.android.com/tools/help/adb.html\">adb</a> par exemple) avant de\npouvoir rendre la connexion possible. Maintenant, les navigateurs incorporent\ndirectement de quoi se connecter aux mobiles.</p>\n<p>Une connexion se fera entre les deux navigateurs (mobile et desktop) et vous\npermettra de voir ce qu'il se passe sur votre mobile en regardant la fenêtre de\ndevtools sur votre desktop. Quelques précisions pour chacun des navigateurs :</p>\n<ul>\n<li>Chrome : lancez l'URL <code>chrome://inspect</code></li>\n<li>Safari : allez dans <code>develop</code> puis vous verrez vos appareils connectés et les\nURL lancées sur vos appareils</li>\n</ul>\n<p>Pas mal non ?</p>\n<p>Mais nous pouvons aller encore plus loin grâce à Firefox qui va nous faciliter\nla tâche. En effet, celui-ci est capable de déboguer n'importe quel navigateur\nvia WebIDE et son <em>adapter</em>\n<a href=\"https://developer.mozilla.org/en-US/docs/Tools/Valence\">Valence</a>.</p>\n<h2 id=\"allez-firefox-webide-\"><a href=\"#allez-firefox-webide-\" class=\"phenomic-HeadingAnchor\">#</a>Allez, Firefox WebIDE !</h2>\n<p>Au départ ce projet avait pour but de déboguer Firefox OS mais grâce au projet\n<a href=\"https://developer.mozilla.org/en-US/docs/Tools/Valence\">Valence</a>, WebIDE permet\nmaintenant aussi de se connecter à d'autres navigateurs comme iOS Safari ou\nDesktop Chrome (n'importe en fait) et de pouvoir déboguer dans les devtools de\nFirefox. Ça, c'est cool.</p>\n<p>Pour activer WebIDE sur votre Firefox, ouvrez un onglet et rentrez comme\nURL<br /><code>about:config?filter=devtools.webide.enabled</code><br /> puis mettre\nl'option à <code>true</code>.</p>\n<p>Allez après dans devtools, \"settings\" (l'engrenage) et activez :</p>\n<ul>\n<li><code>Enable browser chrome and add-on debugging toolboxes</code></li>\n<li><code>Enable remote debugging</code></li>\n</ul>\n<p>puis redémarrez.</p>\n<p>Vous devriez avoir \"WebIDE\" de disponible mais aussi \"Browser Toolbox\" qui est\nun debugger pour inspecter l'application Firefox en elle-même. Pratique pour\nfaire des thèmes !</p>\n<p>Une fois WebIDE lancé, allez dans <code>Select runtime</code> puis <code>Install Simulator</code> et\ninstallez <code>ADB Helper Add-on</code> ainsi que <code>Tools Adapters Add-on</code>.</p>\n<p>Vous êtes bon(ne) pour pouvoir déboguer. Plus qu'à brancher votre appareil,\nallez dans <code>Select runtime</code> et le voir dans la section <code>USB Devices</code>.</p>\n<p>N'hésitez pas à vous référer à la <a href=\"https://developer.mozilla.org/en-US/docs/Tools/WebIDE\">documentation\nofficielle</a> pour de plus\namples informations.</p>\n<p>Un petit hic tout de même. Cela reste une beta (à mon sens), de ce fait la\nconnexion est un peu instable. Il est parfois difficile de se connecter à un\nappareil. Pour cela, débranchez votre téléphone puis rebranchez-le, et\nredémarrez Firefox puis relancez WebIDE, cela devrait être bon.</p>\n<p>Mis à part ceci, c'est top.</p>\n<blockquote>\n<p>Oui mais moi je dois déboguer Android Browser, ça marche tout ça ?</p>\n</blockquote>\n<p>Biiiien, non. J'avoue tout. Aucune des solutions que je viens de vous donner ne\nfonctionne sur Android Browser.</p>\n<blockquote>\n<p>Euh… Quoi ?!</p>\n</blockquote>\n<p>Oui oui, je comprends que vous soyez étonné(e). Moi aussi, je suis dépité à\nchaque fois que je dois développer dessus. Ce navigateur est une belle merde. Il\nne se met à jour que quand votre OS s'y met. Il est le navigateur par défaut et\nle moteur des webviews sur de nombreux (anciens (!|?)) Android. À vrai dire, je\nne comprends même pas comment ce navigateur a pu exister sauf pour dire \"Hey,\nvous avez vu, on ne vous a pas imposé Chrome, contrairement à Microsoft avec\nIE\". Ils auraient p'tête dû finalement.</p>\n<p>Bref. Rassurez-vous, j'ai des solutions.</p>\n<p>Je pourrais vous parler du format en <strong>CLI</strong> mais je ne pense pas que cela vous\nintéresserait. Et vu qu'on ne peut pas inspecter le DOM, juste voir la console,\nce n'est vraiment pas plaisant pour déboguer.</p>\n<p>Je pourrais aussi vous parler de la solution du <code>about:debug</code> mais c'est chiant\n(mais ça dépanne). Cela permet d'afficher une console JS dans le navigateur du\nmobile. Je vais plutôt vous parler ici d'un inspecteur écrit en page web qui se\nbranche partout, un peu comme un Firebug lite. Son petit nom ?\n<a href=\"http://people.apache.org/~pmuellr/weinre-docs/latest/\">weinre</a>.</p>\n<h2 id=\"weinre\"><a href=\"#weinre\" class=\"phenomic-HeadingAnchor\">#</a>weinre</h2>\n<p>… est une solution plus trop récente mais qui a le mérite de fonctionner\npartout, facilement et surtout sur Android browser. Celui-ci va créer une page\nweb avec un webkit-debugger-like, qui lui est connecté via un websocket sur le\nsite que vous êtes en train de déboguer, vous permettant à la fois d'avoir une\nconsole mais aussi une inspection du DOM. Et ça, c'est vraiment chouette.</p>\n<p><img src=\"weinre-console.png\"></p>\n<p>Passons à son installation.</p>\n<h3 id=\"installation\"><a href=\"#installation\" class=\"phenomic-HeadingAnchor\">#</a>Installation</h3>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> (sudo) npm -g install weinre</span></code></pre>\n<h3 id=\"utilisation\"><a href=\"#utilisation\" class=\"phenomic-HeadingAnchor\">#</a>Utilisation</h3>\n<p>Lancez d'abord le process :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> weinre</span></code></pre>\n<p>Ajoutez le script dans votre page qui communiquera avec votre serveur (exemple)\n:</p>\n<pre><code class=\"hljs language-javascript\">&#x3C;script src=<span class=\"hljs-string\">\"http://localhost:8080/target/target-script-min.js#anonymous\"</span> />;</code></pre>\n<p>Puis ouvrez la page <code>http://localhost:8080</code>, vous devriez avoir quelque chose\ncomme ceci :</p>\n<p><img src=\"weinre-interface.png\"></p>\n<p>Plus qu'à cliquer sur <code>http://localhost:8080/client/#anonymous</code> et vous\narriverez sur l'interface du debugger.</p>\n<p>Attention par contre. Ayant eu des problématiques de temps de connexion au\nwebsocket, j'ai dû rajouter un <code>setTimeout</code> avant de lancer mon JavaScript afin\nque la connexion entre la page web et le serveur se fasse pour bien afficher la\ntotalité des <code>console.log</code> et autres. Sans ça, j'ai vu le début de mon app ne\npas être inspectée, dommage.</p>\n<p>Pour le moment j'ai réglé ce problème en mettant un <code>setTimout</code> de 2000ms sur\nl'exécution de mon code car il n'y a actuellement pas de moyens de savoir si la\nconnexion au websocket s'est faite ou non.</p>\n<p>Sachez cependant que le projet n'est plus trop maintenu mais que le principal\n<em>maintainer</em> est encore à l'écoute et recevra volontiers vos améliorations.</p>\n<p>Il existe deux alternatives à weinre :</p>\n<ul>\n<li><a href=\"http://jsconsole.com/remote-debugging.html\">jsconsole</a> (que je n'ai pas\ntesté)</li>\n<li><a href=\"http://vorlonjs.com/\">Vorlon.js</a> : très sympa, très prometteur, plus propre\nque weinre. Seul hic, j'ai voulu tester Vorlon.js sur Android Browser (Android\n4.3), il a fait planter Android Browser rendant impossible le debug. Dommage,\nj'aurais bien remplacé weinre par celui-ci.</li>\n</ul>\n<hr>\n<p>Bien. On a fait le tour des solutions pour inspecter facilement le DOM ainsi\nqu'avoir une console sur n'importe quel navigateur.</p>\n<p>Ce qui serait intéressant maintenant, c'est d'analyser les trames HTTP de\nn'importe quel appareil.</p>\n<h2 id=\"comment-analyser-le-flux-http\"><a href=\"#comment-analyser-le-flux-http\" class=\"phenomic-HeadingAnchor\">#</a>Comment analyser le flux HTTP</h2>\n<p>Pour cette tâche, je vous propose d'installer l'outil\n<a href=\"http://mitmproxy.org/\">mitmproxy</a> qui vous permettra de créer un proxy\nrécupérant tout votre trafic HTTP et de vous l'afficher requête par requête.</p>\n<p>Ce qui va sûrement vous intéresser sera la partie <a href=\"http://mitmproxy.org/doc/transparent.html\">transparent\nproxying</a>. Le proxy se chargera juste\nd'écouter votre trafic et de l'afficher.</p>\n<p>Il sera nécessaire aussi de configurer votre navigateur afin que celui-ci se\nconnecte à votre proxy.</p>\n<p>Si vous êtes sur Android, il vous est nécessaire de le spécifier dans la\nconfiguration réseau de votre appareil. Pour cela :</p>\n<ul>\n<li>Connectez-vous au WiFi (du même réseau que votre hôte) (par exemple \"MoOx\")</li>\n<li>Allez dans \"Settings\", \"Wi-Fi\"</li>\n<li>Restez appuyé sur le nom du WiFi (toujours \"MoOx\")</li>\n<li>Une popin apparaîtra, cliquez sur \"Modify network\"</li>\n<li>Cochez \"Show advanced options\"</li>\n<li>\"Proxy settings\", mettez <code>manual</code></li>\n<li>Entrez les informations de mitmproxy pour vous y connecter</li>\n<li>Validez</li>\n</ul>\n<p>Tout passera maintenant par lui et vous aurez dans votre shell une belle\ninterface montrant toutes les trames passant.</p>\n<p><img src=\"mitmproxy.png\"></p>\n<h2 id=\"note\"><a href=\"#note\" class=\"phenomic-HeadingAnchor\">#</a>Note</h2>\n<p>Une petite note rapide. Pour utliser le Simulator iOS (si vous n'avez pas\nd'iPhone/iPad sous la main par exemple) il est possible que vous deviez\ninstaller <a href=\"https://github.com/google/ios-webkit-debug-proxy\">iOS Webkit Debug\nProxy</a>. Je n'ai pas eu à le\nfaire mais <a href=\"https://twitter.com/tfeserver\">@tfeserver</a> en a eu besoin. Je vous\nlaisse ça de côté si par hasard cela vous était nécessaire.</p>\n<hr>\n<p>Avec ça, vous pouvez maintenant masteriser le debug sur tous les appareils sans\nvous prendre la tête. Il existe aussi une solution s'appelant\n<a href=\"http://www.browsersync.io/\">BrowserSync</a> permettant à la fois le debug et la\nsynchro des comportements sur les différents devices mais ça, ce sera peut-être\npour un prochain post.</p>\n<p>Bon débug.</p>\n","rawBody":"\nVous souhaitez déboguer votre site ou application web mais vous ne savez pas\ntrop comment faire ? Bon. Je sais que vous savez mais je peux peut-être vous\nfaciliter la tâche.\n\nCommençons par le plus simple.\n\n## Un navigateur, un inspecteur\n\nSi vous ne voulez pas vous prendre la tête, la solution la plus simple reste\nd'utiliser l'inspecteur fourni par votre navigateur pour analyser vos pages web.\nFini les add-ons à installer (comme Firebug), chaque navigateur récent a\nmaintenant son propre inspecteur, même Internet Explorer.\n\nÇa, c'est la partie que vous devez sûrement déjà savoir. Par contre, quid du\nmobile ?\n\n### Oui, quid du mobile ?\n\nC'est justement principalement ce qui m'intéresse ici.\n\nPour ce qui est du mobile, je vous propose de commencer par brancher votre\ntéléphone ou tablette sur votre poste en USB puis de lancer deux navigateurs.\nMais pas n'importe lesquels. Les mêmes navigateurs sur desktop et sur mobile.\nPar exemple, si vous voulez déboguer Safari sur iOS, alors lancez Safari sur\nvotre Mac. Si vous voulez déboguer Chrome sur Android, alors lancez Chrome sur\nvotre desktop. Ce n'est vraiment plus aussi compliqué qu'auparavant où il était\nnécessaire d'installer des applications en ligne de commande (comme\n[adb](https://developer.android.com/tools/help/adb.html) par exemple) avant de\npouvoir rendre la connexion possible. Maintenant, les navigateurs incorporent\ndirectement de quoi se connecter aux mobiles.\n\nUne connexion se fera entre les deux navigateurs (mobile et desktop) et vous\npermettra de voir ce qu'il se passe sur votre mobile en regardant la fenêtre de\ndevtools sur votre desktop. Quelques précisions pour chacun des navigateurs :\n\n* Chrome : lancez l'URL `chrome://inspect`\n* Safari : allez dans `develop` puis vous verrez vos appareils connectés et les\n  URL lancées sur vos appareils\n\nPas mal non ?\n\nMais nous pouvons aller encore plus loin grâce à Firefox qui va nous faciliter\nla tâche. En effet, celui-ci est capable de déboguer n'importe quel navigateur\nvia WebIDE et son _adapter_\n[Valence](https://developer.mozilla.org/en-US/docs/Tools/Valence).\n\n## Allez, Firefox WebIDE !\n\nAu départ ce projet avait pour but de déboguer Firefox OS mais grâce au projet\n[Valence](https://developer.mozilla.org/en-US/docs/Tools/Valence), WebIDE permet\nmaintenant aussi de se connecter à d'autres navigateurs comme iOS Safari ou\nDesktop Chrome (n'importe en fait) et de pouvoir déboguer dans les devtools de\nFirefox. Ça, c'est cool.\n\nPour activer WebIDE sur votre Firefox, ouvrez un onglet et rentrez comme\nURL<br />`about:config?filter=devtools.webide.enabled`<br /> puis mettre\nl'option à `true`.\n\nAllez après dans devtools, \"settings\" (l'engrenage) et activez :\n\n* `Enable browser chrome and add-on debugging toolboxes`\n* `Enable remote debugging`\n\npuis redémarrez.\n\nVous devriez avoir \"WebIDE\" de disponible mais aussi \"Browser Toolbox\" qui est\nun debugger pour inspecter l'application Firefox en elle-même. Pratique pour\nfaire des thèmes !\n\nUne fois WebIDE lancé, allez dans `Select runtime` puis `Install Simulator` et\ninstallez `ADB Helper Add-on` ainsi que `Tools Adapters Add-on`.\n\nVous êtes bon(ne) pour pouvoir déboguer. Plus qu'à brancher votre appareil,\nallez dans `Select runtime` et le voir dans la section `USB Devices`.\n\nN'hésitez pas à vous référer à la [documentation\nofficielle](https://developer.mozilla.org/en-US/docs/Tools/WebIDE) pour de plus\namples informations.\n\nUn petit hic tout de même. Cela reste une beta (à mon sens), de ce fait la\nconnexion est un peu instable. Il est parfois difficile de se connecter à un\nappareil. Pour cela, débranchez votre téléphone puis rebranchez-le, et\nredémarrez Firefox puis relancez WebIDE, cela devrait être bon.\n\nMis à part ceci, c'est top.\n\n> Oui mais moi je dois déboguer Android Browser, ça marche tout ça ?\n\nBiiiien, non. J'avoue tout. Aucune des solutions que je viens de vous donner ne\nfonctionne sur Android Browser.\n\n> Euh… Quoi ?!\n\nOui oui, je comprends que vous soyez étonné(e). Moi aussi, je suis dépité à\nchaque fois que je dois développer dessus. Ce navigateur est une belle merde. Il\nne se met à jour que quand votre OS s'y met. Il est le navigateur par défaut et\nle moteur des webviews sur de nombreux (anciens (!|?)) Android. À vrai dire, je\nne comprends même pas comment ce navigateur a pu exister sauf pour dire \"Hey,\nvous avez vu, on ne vous a pas imposé Chrome, contrairement à Microsoft avec\nIE\". Ils auraient p'tête dû finalement.\n\nBref. Rassurez-vous, j'ai des solutions.\n\nJe pourrais vous parler du format en **CLI** mais je ne pense pas que cela vous\nintéresserait. Et vu qu'on ne peut pas inspecter le DOM, juste voir la console,\nce n'est vraiment pas plaisant pour déboguer.\n\nJe pourrais aussi vous parler de la solution du `about:debug` mais c'est chiant\n(mais ça dépanne). Cela permet d'afficher une console JS dans le navigateur du\nmobile. Je vais plutôt vous parler ici d'un inspecteur écrit en page web qui se\nbranche partout, un peu comme un Firebug lite. Son petit nom ?\n[weinre](http://people.apache.org/~pmuellr/weinre-docs/latest/).\n\n## weinre\n\n… est une solution plus trop récente mais qui a le mérite de fonctionner\npartout, facilement et surtout sur Android browser. Celui-ci va créer une page\nweb avec un webkit-debugger-like, qui lui est connecté via un websocket sur le\nsite que vous êtes en train de déboguer, vous permettant à la fois d'avoir une\nconsole mais aussi une inspection du DOM. Et ça, c'est vraiment chouette.\n\n![](weinre-console.png)\n\nPassons à son installation.\n\n### Installation\n\n```console\n$ (sudo) npm -g install weinre\n```\n\n### Utilisation\n\nLancez d'abord le process :\n\n```console\n$ weinre\n```\n\nAjoutez le script dans votre page qui communiquera avec votre serveur (exemple)\n:\n\n```javascript\n<script src=\"http://localhost:8080/target/target-script-min.js#anonymous\" />;\n```\n\nPuis ouvrez la page `http://localhost:8080`, vous devriez avoir quelque chose\ncomme ceci :\n\n![](weinre-interface.png)\n\nPlus qu'à cliquer sur `http://localhost:8080/client/#anonymous` et vous\narriverez sur l'interface du debugger.\n\nAttention par contre. Ayant eu des problématiques de temps de connexion au\nwebsocket, j'ai dû rajouter un `setTimeout` avant de lancer mon JavaScript afin\nque la connexion entre la page web et le serveur se fasse pour bien afficher la\ntotalité des `console.log` et autres. Sans ça, j'ai vu le début de mon app ne\npas être inspectée, dommage.\n\nPour le moment j'ai réglé ce problème en mettant un `setTimout` de 2000ms sur\nl'exécution de mon code car il n'y a actuellement pas de moyens de savoir si la\nconnexion au websocket s'est faite ou non.\n\nSachez cependant que le projet n'est plus trop maintenu mais que le principal\n_maintainer_ est encore à l'écoute et recevra volontiers vos améliorations.\n\nIl existe deux alternatives à weinre :\n\n* [jsconsole](http://jsconsole.com/remote-debugging.html) (que je n'ai pas\n  testé)\n* [Vorlon.js](http://vorlonjs.com/) : très sympa, très prometteur, plus propre\n  que weinre. Seul hic, j'ai voulu tester Vorlon.js sur Android Browser (Android\n  4.3), il a fait planter Android Browser rendant impossible le debug. Dommage,\n  j'aurais bien remplacé weinre par celui-ci.\n\n- - -\n\nBien. On a fait le tour des solutions pour inspecter facilement le DOM ainsi\nqu'avoir une console sur n'importe quel navigateur.\n\nCe qui serait intéressant maintenant, c'est d'analyser les trames HTTP de\nn'importe quel appareil.\n\n## Comment analyser le flux HTTP\n\nPour cette tâche, je vous propose d'installer l'outil\n[mitmproxy](http://mitmproxy.org/) qui vous permettra de créer un proxy\nrécupérant tout votre trafic HTTP et de vous l'afficher requête par requête.\n\nCe qui va sûrement vous intéresser sera la partie [transparent\nproxying](http://mitmproxy.org/doc/transparent.html). Le proxy se chargera juste\nd'écouter votre trafic et de l'afficher.\n\nIl sera nécessaire aussi de configurer votre navigateur afin que celui-ci se\nconnecte à votre proxy.\n\nSi vous êtes sur Android, il vous est nécessaire de le spécifier dans la\nconfiguration réseau de votre appareil. Pour cela :\n\n* Connectez-vous au WiFi (du même réseau que votre hôte) (par exemple \"MoOx\")\n* Allez dans \"Settings\", \"Wi-Fi\"\n* Restez appuyé sur le nom du WiFi (toujours \"MoOx\")\n* Une popin apparaîtra, cliquez sur \"Modify network\"\n* Cochez \"Show advanced options\"\n* \"Proxy settings\", mettez `manual`\n* Entrez les informations de mitmproxy pour vous y connecter\n* Validez\n\nTout passera maintenant par lui et vous aurez dans votre shell une belle\ninterface montrant toutes les trames passant.\n\n![](mitmproxy.png)\n\n## Note\n\nUne petite note rapide. Pour utliser le Simulator iOS (si vous n'avez pas\nd'iPhone/iPad sous la main par exemple) il est possible que vous deviez\ninstaller [iOS Webkit Debug\nProxy](https://github.com/google/ios-webkit-debug-proxy). Je n'ai pas eu à le\nfaire mais [@tfeserver](https://twitter.com/tfeserver) en a eu besoin. Je vous\nlaisse ça de côté si par hasard cela vous était nécessaire.\n\n- - -\n\nAvec ça, vous pouvez maintenant masteriser le debug sur tous les appareils sans\nvous prendre la tête. Il existe aussi une solution s'appelant\n[BrowserSync](http://www.browsersync.io/) permettant à la fois le debug et la\nsynchro des comportements sur les différents devices mais ça, ce sera peut-être\npour un prochain post.\n\nBon débug.\n","__filename":"fr/articles/devtools/deboguer-tablettes-telephones/index.md","__url":"/fr/articles/devtools/deboguer-tablettes-telephones/","__resourceUrl":"/fr/articles/devtools/deboguer-tablettes-telephones/index.html","__dataUrl":"/fr/articles/devtools/deboguer-tablettes-telephones/index.html.22f5f3327d73b012fa7b979f1c3a8606.json"}