{"head":{"layout":"Post","comments":true,"date":"2014-04-08","title":"Les post-processeurs CSS","tags":["css","pré-processeur","post-processeur"],"authors":["MoOx"],"description":"Vous avez surement entendu parler des post-processeurs CSS. J'ai personnellement pas mal fait référence à ce concept cette expression ces…"},"body":"<p>Vous avez surement entendu parler des <a href=\"http://iamvdo.me/blog/les-postprocesseurs-css\"><em>post-processeurs\nCSS</em></a>. J'ai personnellement pas\nmal fait référence à <del>ce concept</del> cette expression ces derniers temps. Que ce\nsoit lorsque je vous racontais <a href=\"/fr/articles/css/autoprefixer\">comment\nse passer des préfixes CSS</a> ou lors\n<a href=\"/fr/articles/css/preprocesseurs/\">d'un point sur les pré-processeurs\nCSS</a>. N'y a-t-il rien qui vous a fait tiquer ?</p>\n<h2 id=\"du-post-processing-\"><a href=\"#du-post-processing-\" class=\"phenomic-HeadingAnchor\">#</a>Du post-processing ?</h2>\n<p>Bon on va pas jouer sur les mots mais quand même un peu. <em>Post</em> ça veut dire\naprès. Mais après quoi ? Après du <em>processing</em>. Donc en théorie après que la\nfeuille de style ait été traitée.</p>\n<p>Si on revient sur <em>pré-processeurs</em>, on a quelques choses de sensé. On travaille\nsur la feuille de style avant qu'elle n'ait été traitée. Traitée par qui ? Je\ndirais le navigateur pas vous ? Dans ce cas le pré-processing est tout à fait\nlogique.</p>\n<p>Mais le post-processing ? Du vrai post-processing ça existe ? Oui et ça\nressemblerait à ça par exemple :\n<a href=\"http://jsfiddle.net/yyx990803/B5JTg/\">Interpolation de CSS avec\nVue.js</a> (enfin je crois). Ici on a un process sur du CSS existant, déjà\ntraité par le navigateur.</p>\n<p>Bon ok j'avoue que je pinaille un peu. On pourrait considérer que le \"process\",\nc'est le fait d'améliorer sa feuille de style et dans ce cas, on pourrait\naccepter pré- et post-process. Mais ça reste pas super exact de mon point de\nvue.</p>\n<p>Du coup on appelle ça comment les post-processeurs ? Devrait-on appeler ça du\n<em>post-pré-processing</em> ? Je vous le demande.</p>\n<p>Assez plaisanté, passons donc à l'explication de ce qu'on appelera le\n<em>post-processing.</em></p>\n<h2 id=\"le-post-processing\"><a href=\"#le-post-processing\" class=\"phenomic-HeadingAnchor\">#</a>Le post-processing</h2>\n<p>Quel est la différence avec du pré-processing ? Pour répondre à cette question,\nil faut bien définir ce qu'est le pré-processing dans notre contexte.</p>\n<h3 id=\"le-pré-processing-css\"><a href=\"#le-pr%C3%A9-processing-css\" class=\"phenomic-HeadingAnchor\">#</a>Le pré-processing CSS</h3>\n<p>Le pré-processing est un pré-traitement avant le traitment final. Dans le cas de\nfeuille de style, on travaille donc sur des pré-feuilles de style. Ce ne sont\ndonc pas des feuilles de style. Comment les différencie-t-on ? La syntaxe.</p>\n<p>Hola hola, calmez-vous. J'en entends déjà chouiner qu'avec Sass, Less et Stylus,\non peut coller du CSS valide et Ça Marche™. Oui ça marche. Mais seulement dans\nce sens. Si on essaye de faire parser un <code>@foreach</code>, <code>@include</code> ou ce genre de\nnouveautés apportés par un pré-processeur, votre navigateur il va faire la\ngueule.</p>\n<p>En effet un pré-processeur n'est rien d'autre qu'un langage. Un nouveau. Il\najoute des éléments à ce langage, et change même éventuellement la syntaxe.\nCertes il peut s'appuyer sur un langage existant (par exemple la syntaxe Scss de\nSass, ou la syntaxe Less ) mais ça n'est pas obligé (exemple avec l'ancienne\nsyntaxe Sass, ou encore pour changer de registre, CoffeeScript pour du\nJavaScript).</p>\n<h3 id=\"différence-entre-post-processing-et-pré-processing\"><a href=\"#diff%C3%A9rence-entre-post-processing-et-pr%C3%A9-processing\" class=\"phenomic-HeadingAnchor\">#</a>Différence entre post-processing et pré-processing</h3>\n<p>Avant de parler des différences il nous faut un cas concret pour y voir plus\nclair. Autoprefixer est un très bon exemple, mais je vais vous en montrer un\nencore plus pertinent: les fallbacks REM. J'espère que vous connaissez le REM\n(root EM), cette unité CSS très utile qui permet d'avoir la souplesse de l'unité\nEM, en se basant non sur l'élement parent, mais l'élement root (donc le\ndocument). Cette unité CSS n'est par exemple pas compatible avec IE8, et certain\nd'entre vous doivent encore le supporter.</p>\n<p>On a donc vu pas mal de mixins genre <code>rem2px()</code> pour ajouter un fallback, via\ndes pré-processeurs CSS. Sauf que là, il semble beaucoup plus pertinent de ne\npas alourdir son code (car on y ajoute rien d'intéressant), surtout lorsque\nc'est pour supporter de vieux navigateurs. Et si on pouvait ajouter un petit\ncoup de peinture magique, je dirais même automatique, afin d'avoir ce fallback ?</p>\n<p>Et bien, on peut. Ça prend 20 secondes, et ça fera les choses bien, sans oubli.\nExemple avec\n<a href=\"https://github.com/ctalkington/rework-rem-fallback\">rework-rem-fallback</a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// il faudrait installer les dépendances de la façon suivante</span>\n<span class=\"hljs-comment\">// $ npm i rework rework-rem-fallback</span>\n\n<span class=\"hljs-keyword\">var</span> rework = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"rework\"</span>); <span class=\"hljs-comment\">// le moteur rework, je reviens dessus après</span>\n<span class=\"hljs-keyword\">var</span> remFallback = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"rework-rem-fallback\"</span>); <span class=\"hljs-comment\">// le plugin rework</span>\n\n<span class=\"hljs-comment\">// lecture du fichier css</span>\n<span class=\"hljs-keyword\">var</span> css = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>)\n  .readFileSync(<span class=\"hljs-string\">\"dist/index.css\"</span>, <span class=\"hljs-string\">\"utf8\"</span>)\n  .toString();\n\n<span class=\"hljs-comment\">// on traite le CSS en indiquant à rework la source, et le plugin à utiliser</span>\n<span class=\"hljs-keyword\">var</span> out = rework(css)\n  .use(remFallback())\n  .toString();\n\n<span class=\"hljs-comment\">// ici on fait la même chose, mais comme si la font de base était en 14px</span>\n<span class=\"hljs-keyword\">var</span> out14 = rework(css)\n  .use(remFallback(<span class=\"hljs-number\">14</span>))\n  .toString();</code></pre>\n<p>Avec l'exemple d'avant, et ce bout de CSS:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.main-header</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">5rem</span>;\n}</code></pre>\n<p>... On obtiendra le résultat suivant:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.main-header</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">80px</span>;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">5rem</span>;\n}</code></pre>\n<p>Notre exemple n'est pas intégré dans un <a href=\"http://www.24joursdeweb.fr/2013/automatisez-votre-workflow-front-end/\">workflow\nautomatisé</a>,\nmais c'est juste pour vous montrer que c'est l'histoire de 5 lignes de code et\npas autant de lignes que de fois où l'on a <code>rem</code> dans sa feuille de style.</p>\n<p>Sexy n'est-ce pas ?</p>\n<p>L'autre grosse différence entre le pré- et le post-processing, c'est le langage.\nCe post-processing s'effectue après du pré-processing. Donc après que le\npré-processeur, cet autre langage, ait fait son boulot.</p>\n<p><strong>Le post-processing s'effectue sur du CSS de manière transparente.</strong></p>\n<p><em>Ce processing s'effectue sur du vrai CSS (disons la syntaxe CSS).</em></p>\n<p>Cette syntaxe étant très simple (se résumant principalement à <code>selecteur { prop: value }</code> - oui y'a les règles <code>@*</code> en plus je sais), <a href=\"https://github.com/reworkcss/css-parse#performance\">c'est très rapide à\nparser</a>.</p>\n<h2 id=\"pourquoi-du-post-processing-\"><a href=\"#pourquoi-du-post-processing-\" class=\"phenomic-HeadingAnchor\">#</a>Pourquoi du post-processing ?</h2>\n<p>Comme on vient de le voir avec les 2 points précédents, on a déjà 3 bonnes\nraisons :</p>\n<ul>\n<li>la simplicité (pour certains cas de figures, c'est plus pertinent, ça évite\ntrop de code et des oublis)</li>\n<li>la vitesse</li>\n<li>le fait de pouvoir brancher ses propres plugins</li>\n</ul>\n<p>Je sais pas vous mais moi ça me suffit. Et en cherchant mieux, on pourrait\nsûrement trouver d'autres arguments. (<em>Rappel : d'ailleurs n'hésitez pas à\nmodifier cet article si vous en avez</em>).</p>\n<h2 id=\"avec-quoi-doit-on-post-processer-ces-css-\"><a href=\"#avec-quoi-doit-on-post-processer-ces-css-\" class=\"phenomic-HeadingAnchor\">#</a>Avec quoi doit-on post-processer ces CSS ?</h2>\n<p>Comme vous avez pu le voir tout à l'heure j'ai pris dans un exemple Rework, mais\nil existe aussi PostCSS, plus récent.</p>\n<h3 id=\"rework\"><a href=\"#rework\" class=\"phenomic-HeadingAnchor\">#</a><a href=\"https://github.com/reworkcss/rework\">Rework</a></h3>\n<p>Rework a été initié par le grand <a href=\"https://github.com/visionmedia\">TJ\nHolowaychuck</a>, cette machine de guerre (<a href=\"http://www.quora.com/TJ-Holowaychuk-1/How-is-TJ-Holowaychuk-so-insanely-productive\">que\ncertains ne pensent même pas\nhumain</a>\npour vous dire). TJ était il fut un temps utilisateur de Sass, il avait donc\nmême commencé le portage de <a href=\"https://github.com/stunti/sass.js\">Sass en Node</a>.\nIl a dû se rendre compte bien avant nous que ce n'était finalement pas forcément\nla meilleure option. Il a donc développé\n<a href=\"https://github.com/LearnBoost/stylus/\">Stylus</a> (si, si, c'est bien lui), le\ntemps de comprendre qu'une autre approche était possible (pour info, il ne\nmaintient maintenant plus Stylus).</p>\n<p>C'est donc <a href=\"https://github.com/reworkcss/rework/commit/0a7be255bfe753d03f93c7072351266fa636e80a\">le 1er Septembre 2012 qu'il pousse la première version de\nRework</a>.</p>\n<p>L'objectif de Rework n'est pas spécialement de gérer du post-process. Rework se\nplace comme un manipulateur de CSS, permettant (entre autres) :</p>\n<ul>\n<li>l'automatisation d'ajout des préfixes</li>\n<li>la création de nouvelles propriétés</li>\n<li>l'intégration d'images inline</li>\n</ul>\n<p>Vous me direz que ça ressemble vachement à un pré-processeur n'est-ce pas ? Vu\nl'historique que je viens de vous conter et <a href=\"https://github.com/reworkcss/rework#plugins\">les plugins par\ndéfaut</a>, vous aurez bien compris\nque c'est l'idée : faire un moteur de pré-processeur où l'on y branche des\nplugins pour ajouter nos propres fonctionnalités. C'est grâce à ce projet\nqu'Autoprefixer a initialement vu le jour d'ailleurs.</p>\n<h3 id=\"postcss\"><a href=\"#postcss\" class=\"phenomic-HeadingAnchor\">#</a><a href=\"https://github.com/ai/postcss\">PostCSS</a></h3>\n<p>Beaucoup plus récent, PostCSS a été écrit par l'auteur d'Autoprefixer.</p>\n<blockquote>\n<p>Heu mais quoi ? Tu viens de nous dire que Autoprefixer utilisait Rework ?!</p>\n</blockquote>\n<p>Oui <em>c'était</em> le cas. <em>Utilisait</em>. L'auteur de PostCSS s'explique dans <a href=\"https://github.com/ai/postcss#rework\">son\nREADME</a>. Il y indique que, bien que très\nsimilaire, Rework et PostCSS n'ont pas été développé pour les mêmes raisons.\nC'est ce qui explique les différences au niveau des moteurs. PostCSS se veut\nplus préservateur par rapport à votre source d'origine, et gère donc mieux\nsourcemap, peut conserver votre espacement et indentation, parse de manière plus\nsécurisé (vu que ça se veut mieux gérer le code legacy).</p>\n<p>Dans la pratique je n'ai jamais eu de problème avec Rework, me souciant peu de\nla mise en forme de la sortie CSS. Mais PostCSS semble avoir une API plus haut\nniveau et plus souple pour mieux travailler les feuilles de styles.</p>\n<h3 id=\"rework-ou-postcss-\"><a href=\"#rework-ou-postcss-\" class=\"phenomic-HeadingAnchor\">#</a>Rework ou PostCSS ?</h3>\n<p>Tout dépend ce que vous voulez faire. Si vous avez en tête l'idée de développer\nun outil, je pencherais plus vers PostCSS. Mais en temps qu'utilisateur, pour\nl'instant, définitivement Rework.</p>\n<p>Ce dernier a clairement beaucoup plus de plugins existants. Voyez par vous-mêmes\n:</p>\n<ul>\n<li><a href=\"https://www.npmjs.org/search?q=rework\">npmjs.org/search?q=rework</a></li>\n<li><a href=\"https://www.npmjs.org/search?q=postcss\">npmjs.org/search?q=postcss</a></li>\n</ul>\n<h2 id=\"rework-ce-nest-pas-que-du-post-processing-\"><a href=\"#rework-ce-nest-pas-que-du-post-processing-\" class=\"phenomic-HeadingAnchor\">#</a>Rework ce n'est pas <em>que</em> du post-processing ?</h2>\n<p>Oui en effet, comme je le disais avant, c'est pas le but. C'est du \"processing\".\nPré-, post-... Qu'est-ce que ça change dans le fond hein ?</p>\n<p>L'idée, en temps que développeur, est d'améliorer le confort d'écriture sans\ncontrainte. Comme je l'ai indiqué\n<a href=\"/fr/articles/css/preprocesseurs/#mon-avis-sur-les-pr-processeurs\">précédemment</a>,\nj'ai laché les pré-processeurs \"classiques\" ayant l'impression d'utiliser un\ntank pour tuer une mouche. Car au fond pour 90% (si ce n'est plus) d'entres\nnous, que nous faut-il pour bien développer des feuilles de styles ? Un peu\nd'organisation, des variables et un poil de math ? Personnellement je me\ncontente de ça. Pour l'organisation, je suis devenu fan de BEM (on vous en parle\nbientôt).</p>\n<p><strong>Et en attendant de vraiment pouvoir utiliser les variables CSS associé à\n<code>calc()</code>, je reste sur du <em>custom pré-processing</em> via Rework avec lequel je peux\ncoder avec la syntaxe des specs (même si c'est en draft), plus future-proof.</strong></p>\n<p>J'aime conserver la syntaxe CSS et avoir un process ultra-rapide et transparent.</p>\n<h3 id=\"prochaine-étape-faire-son-propre-prépost-processeur-css-cest-simple\"><a href=\"#prochaine-%C3%A9tape-faire-son-propre-pr%C3%A9post-processeur-css-cest-simple\" class=\"phenomic-HeadingAnchor\">#</a>Prochaine étape: faire son propre pré/post-processeur CSS, c'est simple</h3>\n<p>Rework ayant un bon petit paquet de plugins déjà existants, c'est assez simple\nde <a href=\"/fr/articles/css/preprocesseurs/a-la-carte/\">réaliser son propre\npré-processeur</a> via quelques lignes\nde code seulement.</p>\n","rawBody":"\nVous avez surement entendu parler des [_post-processeurs\nCSS_](http://iamvdo.me/blog/les-postprocesseurs-css). J'ai personnellement pas\nmal fait référence à ~~ce concept~~ cette expression ces derniers temps. Que ce\nsoit lorsque je vous racontais <a href=\"/fr/articles/css/autoprefixer\">comment\nse passer des préfixes CSS</a> ou lors\n<a href=\"/fr/articles/css/preprocesseurs/\">d'un point sur les pré-processeurs\nCSS</a>. N'y a-t-il rien qui vous a fait tiquer ?\n\n## Du post-processing ?\n\nBon on va pas jouer sur les mots mais quand même un peu. _Post_ ça veut dire\naprès. Mais après quoi ? Après du *processing*. Donc en théorie après que la\nfeuille de style ait été traitée.\n\nSi on revient sur *pré-processeurs*, on a quelques choses de sensé. On travaille\nsur la feuille de style avant qu'elle n'ait été traitée. Traitée par qui ? Je\ndirais le navigateur pas vous ? Dans ce cas le pré-processing est tout à fait\nlogique.\n\nMais le post-processing ? Du vrai post-processing ça existe ? Oui et ça\nressemblerait à ça par exemple :\n<a href=\"http://jsfiddle.net/yyx990803/B5JTg/\">Interpolation de CSS avec\nVue.js</a> (enfin je crois). Ici on a un process sur du CSS existant, déjà\ntraité par le navigateur.\n\nBon ok j'avoue que je pinaille un peu. On pourrait considérer que le \"process\",\nc'est le fait d'améliorer sa feuille de style et dans ce cas, on pourrait\naccepter pré- et post-process. Mais ça reste pas super exact de mon point de\nvue.\n\nDu coup on appelle ça comment les post-processeurs ? Devrait-on appeler ça du\n_post-pré-processing_ ? Je vous le demande.\n\nAssez plaisanté, passons donc à l'explication de ce qu'on appelera le\n_post-processing._\n\n## Le post-processing\n\nQuel est la différence avec du pré-processing ? Pour répondre à cette question,\nil faut bien définir ce qu'est le pré-processing dans notre contexte.\n\n### Le pré-processing CSS\n\nLe pré-processing est un pré-traitement avant le traitment final. Dans le cas de\nfeuille de style, on travaille donc sur des pré-feuilles de style. Ce ne sont\ndonc pas des feuilles de style. Comment les différencie-t-on ? La syntaxe.\n\nHola hola, calmez-vous. J'en entends déjà chouiner qu'avec Sass, Less et Stylus,\non peut coller du CSS valide et Ça Marche™. Oui ça marche. Mais seulement dans\nce sens. Si on essaye de faire parser un `@foreach`, `@include` ou ce genre de\nnouveautés apportés par un pré-processeur, votre navigateur il va faire la\ngueule.\n\nEn effet un pré-processeur n'est rien d'autre qu'un langage. Un nouveau. Il\najoute des éléments à ce langage, et change même éventuellement la syntaxe.\nCertes il peut s'appuyer sur un langage existant (par exemple la syntaxe Scss de\nSass, ou la syntaxe Less ) mais ça n'est pas obligé (exemple avec l'ancienne\nsyntaxe Sass, ou encore pour changer de registre, CoffeeScript pour du\nJavaScript).\n\n### Différence entre post-processing et pré-processing\n\nAvant de parler des différences il nous faut un cas concret pour y voir plus\nclair. Autoprefixer est un très bon exemple, mais je vais vous en montrer un\nencore plus pertinent: les fallbacks REM. J'espère que vous connaissez le REM\n(root EM), cette unité CSS très utile qui permet d'avoir la souplesse de l'unité\nEM, en se basant non sur l'élement parent, mais l'élement root (donc le\ndocument). Cette unité CSS n'est par exemple pas compatible avec IE8, et certain\nd'entre vous doivent encore le supporter.\n\nOn a donc vu pas mal de mixins genre `rem2px()` pour ajouter un fallback, via\ndes pré-processeurs CSS. Sauf que là, il semble beaucoup plus pertinent de ne\npas alourdir son code (car on y ajoute rien d'intéressant), surtout lorsque\nc'est pour supporter de vieux navigateurs. Et si on pouvait ajouter un petit\ncoup de peinture magique, je dirais même automatique, afin d'avoir ce fallback ?\n\nEt bien, on peut. Ça prend 20 secondes, et ça fera les choses bien, sans oubli.\nExemple avec\n[rework-rem-fallback](https://github.com/ctalkington/rework-rem-fallback)\n\n```js\n// il faudrait installer les dépendances de la façon suivante\n// $ npm i rework rework-rem-fallback\n\nvar rework = require(\"rework\"); // le moteur rework, je reviens dessus après\nvar remFallback = require(\"rework-rem-fallback\"); // le plugin rework\n\n// lecture du fichier css\nvar css = require(\"fs\")\n  .readFileSync(\"dist/index.css\", \"utf8\")\n  .toString();\n\n// on traite le CSS en indiquant à rework la source, et le plugin à utiliser\nvar out = rework(css)\n  .use(remFallback())\n  .toString();\n\n// ici on fait la même chose, mais comme si la font de base était en 14px\nvar out14 = rework(css)\n  .use(remFallback(14))\n  .toString();\n```\n\nAvec l'exemple d'avant, et ce bout de CSS:\n\n```css\n.main-header {\n  width: 5rem;\n}\n```\n\n... On obtiendra le résultat suivant:\n\n```css\n.main-header {\n  width: 80px;\n  width: 5rem;\n}\n```\n\nNotre exemple n'est pas intégré dans un [workflow\nautomatisé](http://www.24joursdeweb.fr/2013/automatisez-votre-workflow-front-end/),\nmais c'est juste pour vous montrer que c'est l'histoire de 5 lignes de code et\npas autant de lignes que de fois où l'on a `rem` dans sa feuille de style.\n\nSexy n'est-ce pas ?\n\nL'autre grosse différence entre le pré- et le post-processing, c'est le langage.\nCe post-processing s'effectue après du pré-processing. Donc après que le\npré-processeur, cet autre langage, ait fait son boulot.\n\n**Le post-processing s'effectue sur du CSS de manière transparente.**\n\n_Ce processing s'effectue sur du vrai CSS (disons la syntaxe CSS)._\n\nCette syntaxe étant très simple (se résumant principalement à `selecteur { prop:\nvalue }` - oui y'a les règles `@*` en plus je sais), [c'est très rapide à\nparser](https://github.com/reworkcss/css-parse#performance).\n\n## Pourquoi du post-processing ?\n\nComme on vient de le voir avec les 2 points précédents, on a déjà 3 bonnes\nraisons :\n\n* la simplicité (pour certains cas de figures, c'est plus pertinent, ça évite\n  trop de code et des oublis)\n* la vitesse\n* le fait de pouvoir brancher ses propres plugins\n\nJe sais pas vous mais moi ça me suffit. Et en cherchant mieux, on pourrait\nsûrement trouver d'autres arguments. (*Rappel : d'ailleurs n'hésitez pas à\nmodifier cet article si vous en avez*).\n\n## Avec quoi doit-on post-processer ces CSS ?\n\nComme vous avez pu le voir tout à l'heure j'ai pris dans un exemple Rework, mais\nil existe aussi PostCSS, plus récent.\n\n### [Rework](https://github.com/reworkcss/rework)\n\nRework a été initié par le grand [TJ\nHolowaychuck](https://github.com/visionmedia), cette machine de guerre ([que\ncertains ne pensent même pas\nhumain](http://www.quora.com/TJ-Holowaychuk-1/How-is-TJ-Holowaychuk-so-insanely-productive)\npour vous dire). TJ était il fut un temps utilisateur de Sass, il avait donc\nmême commencé le portage de [Sass en Node](https://github.com/stunti/sass.js).\nIl a dû se rendre compte bien avant nous que ce n'était finalement pas forcément\nla meilleure option. Il a donc développé\n[Stylus](https://github.com/LearnBoost/stylus/) (si, si, c'est bien lui), le\ntemps de comprendre qu'une autre approche était possible (pour info, il ne\nmaintient maintenant plus Stylus).\n\nC'est donc [le 1er Septembre 2012 qu'il pousse la première version de\nRework](https://github.com/reworkcss/rework/commit/0a7be255bfe753d03f93c7072351266fa636e80a).\n\nL'objectif de Rework n'est pas spécialement de gérer du post-process. Rework se\nplace comme un manipulateur de CSS, permettant (entre autres) :\n\n* l'automatisation d'ajout des préfixes\n* la création de nouvelles propriétés\n* l'intégration d'images inline\n\nVous me direz que ça ressemble vachement à un pré-processeur n'est-ce pas ? Vu\nl'historique que je viens de vous conter et [les plugins par\ndéfaut](https://github.com/reworkcss/rework#plugins), vous aurez bien compris\nque c'est l'idée : faire un moteur de pré-processeur où l'on y branche des\nplugins pour ajouter nos propres fonctionnalités. C'est grâce à ce projet\nqu'Autoprefixer a initialement vu le jour d'ailleurs.\n\n### [PostCSS](https://github.com/ai/postcss)\n\nBeaucoup plus récent, PostCSS a été écrit par l'auteur d'Autoprefixer.\n\n> Heu mais quoi ? Tu viens de nous dire que Autoprefixer utilisait Rework ?!\n\nOui _c'était_ le cas. *Utilisait*. L'auteur de PostCSS s'explique dans [son\nREADME](https://github.com/ai/postcss#rework). Il y indique que, bien que très\nsimilaire, Rework et PostCSS n'ont pas été développé pour les mêmes raisons.\nC'est ce qui explique les différences au niveau des moteurs. PostCSS se veut\nplus préservateur par rapport à votre source d'origine, et gère donc mieux\nsourcemap, peut conserver votre espacement et indentation, parse de manière plus\nsécurisé (vu que ça se veut mieux gérer le code legacy).\n\nDans la pratique je n'ai jamais eu de problème avec Rework, me souciant peu de\nla mise en forme de la sortie CSS. Mais PostCSS semble avoir une API plus haut\nniveau et plus souple pour mieux travailler les feuilles de styles.\n\n### Rework ou PostCSS ?\n\nTout dépend ce que vous voulez faire. Si vous avez en tête l'idée de développer\nun outil, je pencherais plus vers PostCSS. Mais en temps qu'utilisateur, pour\nl'instant, définitivement Rework.\n\nCe dernier a clairement beaucoup plus de plugins existants. Voyez par vous-mêmes\n:\n\n* [npmjs.org/search?q=rework](https://www.npmjs.org/search?q=rework)\n* [npmjs.org/search?q=postcss](https://www.npmjs.org/search?q=postcss)\n\n## Rework ce n'est pas _que_ du post-processing ?\n\nOui en effet, comme je le disais avant, c'est pas le but. C'est du \"processing\".\nPré-, post-... Qu'est-ce que ça change dans le fond hein ?\n\nL'idée, en temps que développeur, est d'améliorer le confort d'écriture sans\ncontrainte. Comme je l'ai indiqué\n[précédemment](/fr/articles/css/preprocesseurs/#mon-avis-sur-les-pr-processeurs),\nj'ai laché les pré-processeurs \"classiques\" ayant l'impression d'utiliser un\ntank pour tuer une mouche. Car au fond pour 90% (si ce n'est plus) d'entres\nnous, que nous faut-il pour bien développer des feuilles de styles ? Un peu\nd'organisation, des variables et un poil de math ? Personnellement je me\ncontente de ça. Pour l'organisation, je suis devenu fan de BEM (on vous en parle\nbientôt).\n\n**Et en attendant de vraiment pouvoir utiliser les variables CSS associé à\n`calc()`, je reste sur du _custom pré-processing_ via Rework avec lequel je peux\ncoder avec la syntaxe des specs (même si c'est en draft), plus future-proof.**\n\nJ'aime conserver la syntaxe CSS et avoir un process ultra-rapide et transparent.\n\n### Prochaine étape: faire son propre pré/post-processeur CSS, c'est simple\n\nRework ayant un bon petit paquet de plugins déjà existants, c'est assez simple\nde [réaliser son propre\npré-processeur](/fr/articles/css/preprocesseurs/a-la-carte/) via quelques lignes\nde code seulement.\n","__filename":"fr/articles/css/preprocesseurs/post-processeurs/index.md","__url":"/fr/articles/css/preprocesseurs/post-processeurs/","__resourceUrl":"/fr/articles/css/preprocesseurs/post-processeurs/index.html","__dataUrl":"/fr/articles/css/preprocesseurs/post-processeurs/index.html.d0a597f72ce01b30bdf58195f53aa1ae.json"}