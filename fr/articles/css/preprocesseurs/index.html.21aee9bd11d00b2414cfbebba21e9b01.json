{"head":{"layout":"Post","comments":true,"date":"2014-03-11","title":"Le point sur les pré-processeurs CSS","tags":["css","pré-processeur","post-processeur"],"authors":["MoOx"],"description":"Pourquoi les pré-processeurs Voilà ce que j'ai écrit en 2011 dans mon premier post sur les pré-processeur. Je venais de découvrir cette…"},"body":"<h2 id=\"pourquoi-les-pré-processeurs\"><a href=\"#pourquoi-les-pr%C3%A9-processeurs\" class=\"phenomic-HeadingAnchor\">#</a>Pourquoi les pré-processeurs</h2>\n<p>Voilà ce que j'ai écrit en 2011 dans <a href=\"http://moox.io/blog/utiliser-des-variables-fonctions-css/\">mon premier post sur les\npré-processeur</a>. Je\nvenais de découvrir cette notion et j'avais donc fait le tour de la question.</p>\n<blockquote>\n<p>Le langage des CSS n’a pas de côté dynamique. C’est lui avec lequel, à chaque\nfois qu’on intègre une maquette graphique, on doit se taper tout de zéro. Il a\nbeau exister des CSS « Reset », des frameworks CSS, tout un tas de grilles\nprête à l’emploi, des composants de CSS réutilisables avec l’approche objet,\nje n’ai jamais réellement été satisfait par ces méthodes, que ce soit à cause\ndes contraintes qu’impose la syntaxe (devoir mettre des classes à tout va dans\nl’HTML ça peut vite devenir chiant dans un CMS), ou par d’éventuelles\nlimitations qui obligent à « trop » modifier la source du document (pas assez\nde, ou trop de, ou seulement ça ne me plait pas comment c’est fait).</p>\n</blockquote>\n<p>J'avais tout dit, même des trucs qu'aujourd'hui je pense être des conneries (il\nn'y a que les cons qui ne changent pas d'avis + c'est en faisant des erreurs\nqu'on apprend le mieux), mais je reviendrais dessus plus tard.</p>\n<p>Du coup on en retire quoi ? Qu'utiliser un pré-processeur se justifie par\nl'ajout de fonctionnalités lorsque vous écrivez des feuilles de style (en tant\nque développeur). En tant qu'utilisateur du code produit, cela va permettre\nd'ajouter une couche abstraction (ce qui peut poser des problèmes, je\nreviendrais sur ce point plus tard).</p>\n<h2 id=\"principales-fonctionnalités\"><a href=\"#principales-fonctionnalit%C3%A9s\" class=\"phenomic-HeadingAnchor\">#</a>Principales fonctionnalités</h2>\n<ul>\n<li>variables</li>\n<li>fonctions</li>\n<li>mixins (permettant de réaliser des sorties CSS paramétrables)</li>\n<li><code>@import</code> intelligent (pas côté client)</li>\n<li>nesting (imbrications des sélecteurs pour éviter la répétition)</li>\n<li>optimisation et abstraction poussée (via les mixins, placeholders et\n<code>@extend</code>)</li>\n</ul>\n<p>Anciennement on aurait rajouté à cette liste la gestion du CSS 3, mais comme je\nl'expliquais il y a peu, ce n'est plus nécessaire, on a une méthode bien mieux,\nrapide et surtout <b>maintenu à jour</b> avec\n<a href=\"/fr/articles/css/autoprefixer/\">AutoPrefixer</a></p>\n<h2 id=\"les-principaux-pré-processeurs\"><a href=\"#les-principaux-pr%C3%A9-processeurs\" class=\"phenomic-HeadingAnchor\">#</a>Les principaux pré-processeurs</h2>\n<h3 id=\"sass\"><a href=\"#sass\" class=\"phenomic-HeadingAnchor\">#</a><a href=\"http://sass-lang.com/\">Sass</a></h3>\n<p>Sass est à mon avis le plus mature des pré-processeurs CSS. Il possède 2\nsyntaxes (une indentée et une plus proche de CSS). Ce projet avance à bon\nrythme. Niveau fonctionnalités, rien à dire si ce n'est que celui-ci a un petit\nplus pour avec la feature <code>@content</code> qui permet pour le coup de passer tout un\nbloc de propriétés en paramètre à des mixins. Ce qui est super pratique lorsque\nl'on écrit pas mal de media queries. (Après, venez pas me dire qu'on a plein de\nfois les media-queries qui se répètent et que ce n'est pas bien pour la taille\ndu fichier, gzip se chargera de ça - <small><a href=\"https://twitter.com/kaelig/status/412909849207644160\">exemple\nsimilaire</a>)</small>.</p>\n<p>Le langage Sass possède une implémentation d'origine en Ruby mais aussi depuis\nquelques temps une implémentation C qui se veut beaucoup plus rapide et\nportable: <a href=\"http://libsass.org/\">libsass</a> mais qui est encore un peu en retard\nniveau fonctionnalité (affaire à suivre). Surtout depuis la version 3.3 qui\npossède de nouvelles fonctionnalités (comme les maps, entre autres).</p>\n<p>Avec ce pré-processeur, on peut s'éloigner pas mal du CSS natif, que ce soit\navec la syntaxe ou l'aspect programmation (il n'y a qu'à voir des trucs comme\n<a href=\"https://github.com/Team-Sass/modular-scale\">modular-scale</a> ou\n<a href=\"https://github.com/HugoGiraudel/SassyMatrix\">SassyMatrix</a>).</p>\n<p>Bibliotèques construites sur Sass :</p>\n<ul>\n<li><a href=\"http://compass-style.org/\">Compass</a>, solide, basé sur Ruby (incompatible\nlibsass),</li>\n<li><a href=\"http://bourbon.io/\">Bourbon</a>, plus light mais plus rapide.</li>\n</ul>\n<h3 id=\"less\"><a href=\"#less\" class=\"phenomic-HeadingAnchor\">#</a><a href=\"http://lesscss.org/\">LESS</a></h3>\n<p>Je n'ai pas trop envie de parler de ce pré-processeur assez classique, qui a\nfait un choix assez étrange pour les variables par exemple (oui, <code>@</code> est un\ncaractère spécial en CSS, c'est assez étrange de rajouter une couche avec pour\nles variables avec ce dernier). J'espère seulement que ceux qui l'utilisent\naujourd'hui n'utilise pas le script côté client (ce qui provoquerait un\naffichage sans CSS si le client n'a pas JavaScript activé). Bien qu'il soit\npopulaire, le repository sur GitHub n'est pas signe de bonne santé à mes yeux.\nVoir des pull-requests qui traînent vielles de plusieurs <del>mois</del>\n<ins>années</ins> me laissent dubitatif... Puis il n'y a qu'à voir l'exemple sur\nla homepage du site avec les box-shadow, pour voir que ce pré-processeur est\nassez déprécié.</p>\n<p>Ajoutons à cela le fait que Twitter Boostrap a (enfin) une version Sass...</p>\n<p>Côté fonctionnalités, l'aspect programmation est assez laborieux avec la façon\ndont sont gérés les mixins conditionnels. Je passe sur ce point gerbant.</p>\n<p>Bibliotèques construites sur Less :</p>\n<ul>\n<li><a href=\"http://lesshat.madebysource.com/\">LESS Hat</a>,</li>\n<li><a href=\"http://www.lesselements.com/\">LESS Elements</a>.</li>\n</ul>\n<h3 id=\"stylus\"><a href=\"#stylus\" class=\"phenomic-HeadingAnchor\">#</a><a href=\"http://learnboost.github.io/stylus/\">Stylus</a></h3>\n<p>Stylus se veut plus transparent que les autres pré-processeurs. C'est un point\nréussi puisqu'il permet d'avoir des mixins transparents au niveau écriture. Cela\npeut par contre bien entendu rendre la maintenance et la compréhension plus\ndifficile si on en abuse. Il permet aussi de coder sans <code>{}</code> ni <code>:</code> ni <code>;</code> (bien\nque tout cela soit optionnel)</p>\n<p>Niveau fonctionnalités cela ne vaut pas Sass. Ici pas de <code>@content</code> ou de maps.</p>\n<p>Bibliotèque construite sur Stylus :</p>\n<ul>\n<li><a href=\"http://visionmedia.github.io/nib/\">Nib</a></li>\n</ul>\n<h3 id=\"alternatives\"><a href=\"#alternatives\" class=\"phenomic-HeadingAnchor\">#</a>Alternatives</h3>\n<p>On peut s'amuser à faire un pré-processeur CSS avec n'importe quel langage c'est\névident. Mais <a href=\"http://www.alsacreations.com/astuce/lire/1433-utiliser-php-pour-gerer-vos-styles-css.html\">les enfants, ne faites pas\nça.</a>\nÀ moins que vous souhaitiez alourdir vos CSS plus que vous y gagnerez. Puis si\nc'est juste pour ajouter des variables, il existe d'autres solutions...</p>\n<p><em>Note: si vous avez d'autres pré-processeurs intéressants, je me ferais un\nplaisir de les ajouter ici. Mais bon <a href=\"https://github.com/putaindecode/putaindecode.io/blob/master/pages/fr/articles/css/preprocesseurs/index.md\">vous pouvez aussi le faire tout seul comme\nun\ngrand</a>.</em></p>\n<h2 id=\"les-pré-processeurs-sont-ils-vraiment-nécessaire-\"><a href=\"#les-pr%C3%A9-processeurs-sont-ils-vraiment-n%C3%A9cessaire-\" class=\"phenomic-HeadingAnchor\">#</a>Les pré-processeurs sont-ils vraiment nécessaire ?</h2>\n<blockquote>\n<p>Oula. Le mec vient de nous poser un post pour nous parler des pré-processeurs,\net il nous sort une question comme ça ? Il est où le piège ?</p>\n</blockquote>\n<p>Si je pose la question c'est que j'ai une petite réponse par là. Et elle ne va\npeut-être pas vous plaire.</p>\n<p>Je vais revenir sur certains points qui peuvent poser problème avec les\npré-processeurs.</p>\n<h3 id=\"le-nesting-cay-mal\"><a href=\"#le-nesting-cay-mal\" class=\"phenomic-HeadingAnchor\">#</a>Le nesting cay mal</h3>\n<p>Ahh... Le nesting, c'est bien pratique lorsque l'on travaille sur un CMS (ou\nn'importe quoi ayant un code HTML qu'on ne maitrise pas facilement) de pouvoir\nutiliser le nesting pour pouvoir rapidement produire les sélecteurs adéquats.\nMais en terme de maintenance et surtout de réutilisation, c'est vraiment à\nchier. Faut dire ce qui est.</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-selector-class\">.widget</span> {\n  <span class=\"hljs-comment\">// titre</span>\n  <span class=\"hljs-selector-tag\">h3</span> {\n  }\n\n  <span class=\"hljs-comment\">// widget body</span>\n  > <span class=\"hljs-selector-tag\">div</span> {\n    <span class=\"hljs-comment\">// liste</span>\n    <span class=\"hljs-selector-tag\">ul</span> {\n    }\n  }\n}</code></pre>\n<p>Cet exemple est parfait pour démontrer les limites du nesting. Comment faire si,\nsur un widget donnée, nous avons comme titre un h2 ou h4 ? Il faut alourdir la\nCSS. Pareillement, si notre fameuse liste dans le corps n'est pas dans la même\narborescence que celle décrite, il faut à nouveau alourdir notre CSS. Sans\nrentrer dans ces solutions solides (nous parlerons de BEM très bientôt), cette\nsolution serait bien plus élégante pour la réutilisation :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.widget</span> {\n}\n\n<span class=\"hljs-selector-class\">.widget-title</span> {\n}\n\n<span class=\"hljs-selector-class\">.widget-body</span> {\n}\n\n<span class=\"hljs-selector-class\">.widget-body-list</span> {\n}</code></pre>\n<p>Vous remarquerez que j'ai un code ici beaucoup plus compréhensible par un\nnouveau, mais aussi bien mieux réutilisable et surtout, point très important,\nnon couplé (non dépendant) à notre arborescence HTML (coucou le DOM). De plus,\nutiliser le nesting provoque des sélecteurs à rallonges, après c'est la course à\nla longueur (et au poids) des sélecteurs quand il faut surcharger une règle\nhéritée. Avec de simple sélecteurs, pas de souci de ce genre là.</p>\n<p><em>ProTip™ : vous remarquerez que j'indente mon CSS à l'image des composants, ça\nmange pas de pain, est cela facilite la lecture, moins linéaire.</em></p>\n<p>Donc je reviens sur ce que je disais, il faut utiliser pleins de classes dans\nl'HTML. Ça sert à ça. Votre CSS produit de cette façon sera bien plus\nréutilisable.</p>\n<h3 id=\"labstraction-cay-dangereux\"><a href=\"#labstraction-cay-dangereux\" class=\"phenomic-HeadingAnchor\">#</a>L'abstraction cay dangereux</h3>\n<p>On en revient à la magie. Lorsqu'on a trop de couche qui cache ce qu'il y a\nréellement sous le capot, <a href=\"http://linuxfr.org/news/encore-un-exemple-de-code-spaghetti-toyota\">on peut vite perdre le\ncontrôle</a>.</p>\n<p>Et voici <a href=\"https://github.com/MoOx/compass-recipes/issues/104\">un parfait\nexemple</a> où un utilisateur\nde ma bibliothèque <a href=\"https://github.com/MoOx/compass-recipes\">Compass Recipes</a>\navait un problème lorsqu'il utilisait 2 mixins qui cachaient trop de code. Dans\nnotre cas corners-tucked (version coin scotché) et background-noise (bruit\nvisuel). Il en a perdu des choses simples et avait passé beaucoup de temps à se\nprendre la tête alors que la solution était très (trop) simple (une histoire\nentre <code>background-image</code> et le shorthand <code>background</code>).</p>\n<p>Je me laisse souvent attirer par la magie d'un code, mais mon expérience\nm'indique aujourd'hui qu'il ne faut pas abuser de cette partie mystérieuse où\nl'on ne sait plus ce qui se passe.</p>\n<p>Je vous laisse imaginer du nesting caché dans des mixins qui utilisent d'autres\nmixins qui font des @extends de placeholders...</p>\n<blockquote>\n<p>Un grand pouvoir implique de grandes responsabilités.</p>\n</blockquote>\n<p>Tout est dit. Il faut faire attention. Très attention.</p>\n<h2 id=\"mon-avis-sur-les-pré-processeurs\"><a href=\"#mon-avis-sur-les-pr%C3%A9-processeurs\" class=\"phenomic-HeadingAnchor\">#</a>Mon avis sur les pré-processeurs</h2>\n<p>Je pense que les pré-processeurs restent utiles mais seulement pour des projets\nde très grosse envergure, qui possède énormément de code CSS et/ou extrêmement\ndynamique. Ou que vous utilisez de solutions comme\n<a href=\"http://getbootstrap.com/\">Bootstrap</a> ou\n<a href=\"http://foundation.zurb.com/\">Foundation</a>, chose que je déconseille pour autre\nchose que des prototypes.</p>\n<p>De part mon expérience et mon recul (si si j'en prends je vous jure), je pense\nque j'aurais pu m'en passer bien plus souvent que j'ai voulu l'admettre par le\npassé. Mais bon comme je dis souvent, quel plaisir de se planter quand ce n'est\npas dans un platane !</p>\n<p>Ce qu'il faut retenir clairement c'est que ce ne sont pas les pré-processeurs\nqui vont vous faire écrire des meilleurs feuilles de styles. C'est plus un\ntravail sur une méthodologie et une organisation adaptées à vos besoins qui\namélioreront votre quotidien de webdesigner (oui quoi, dès qu'on code du CSS, on\npeut utiliser l'appellation webdesigner sur son CV, ça en jette).</p>\n<p>J'ai donc longtemps apprécié les pré-processeurs CSS, mais aujourd'hui je\ncommence à leur tourner le dos du fait que je n'utilise que trop peu de leurs\nfonctionnalités. J'évite l'overkill quoi.</p>\n<p>Quand on voit que des <em>grands</em> de l'HTML / CSS comme\n<a href=\"http://nicolasgallagher.com/\">@necolas</a> n'utilise pas de pré-processeur, on a\nde quoi se poser des questions. Avec une bonne bibliothèque comme <a href=\"https://github.com/suitcss/suit/\">SUIT\nCSS</a>, on s'en retrouve à ne manquer que des\npetites choses.</p>\n<p>Que l'on peut combler.</p>\n<p>Avec les post-processeurs par exemple.</p>\n<p>J'ai donc à ce jour moi aussi conservé une couche pour ajouter le minimum vital\nen tant que développeur.</p>\n<p>Mais ne voulant pas alourdir ce post consacré aux pré-processeurs CSS, vous\npourrez continuer la lecture au prochain épisode qui sera consacré aux\npost-processeurs...</p>\n<p><small>(Mamam, t'as vu ce cliffhanger digne des séries US !)</small></p>\n<p><del>Bon promis la prochaine fois je vous en parle des post-processeurs. Pour de\nvrai.</del> Chose promise, chose due : <a href=\"/fr/articles/css/preprocesseurs/post-processeurs/\">Les post-processeurs\nCSS</a></p>\n","rawBody":"\n## Pourquoi les pré-processeurs\n\nVoilà ce que j'ai écrit en 2011 dans [mon premier post sur les\npré-processeur](http://moox.io/blog/utiliser-des-variables-fonctions-css/). Je\nvenais de découvrir cette notion et j'avais donc fait le tour de la question.\n\n> Le langage des CSS n’a pas de côté dynamique. C’est lui avec lequel, à chaque\n> fois qu’on intègre une maquette graphique, on doit se taper tout de zéro. Il a\n> beau exister des CSS « Reset », des frameworks CSS, tout un tas de grilles\n> prête à l’emploi, des composants de CSS réutilisables avec l’approche objet,\n> je n’ai jamais réellement été satisfait par ces méthodes, que ce soit à cause\n> des contraintes qu’impose la syntaxe (devoir mettre des classes à tout va dans\n> l’HTML ça peut vite devenir chiant dans un CMS), ou par d’éventuelles\n> limitations qui obligent à « trop » modifier la source du document (pas assez\n> de, ou trop de, ou seulement ça ne me plait pas comment c’est fait).\n\nJ'avais tout dit, même des trucs qu'aujourd'hui je pense être des conneries (il\nn'y a que les cons qui ne changent pas d'avis + c'est en faisant des erreurs\nqu'on apprend le mieux), mais je reviendrais dessus plus tard.\n\nDu coup on en retire quoi ? Qu'utiliser un pré-processeur se justifie par\nl'ajout de fonctionnalités lorsque vous écrivez des feuilles de style (en tant\nque développeur). En tant qu'utilisateur du code produit, cela va permettre\nd'ajouter une couche abstraction (ce qui peut poser des problèmes, je\nreviendrais sur ce point plus tard).\n\n## Principales fonctionnalités\n\n* variables\n* fonctions\n* mixins (permettant de réaliser des sorties CSS paramétrables)\n* `@import` intelligent (pas côté client)\n* nesting (imbrications des sélecteurs pour éviter la répétition)\n* optimisation et abstraction poussée (via les mixins, placeholders et\n  `@extend`)\n\nAnciennement on aurait rajouté à cette liste la gestion du CSS 3, mais comme je\nl'expliquais il y a peu, ce n'est plus nécessaire, on a une méthode bien mieux,\nrapide et surtout <b>maintenu à jour</b> avec\n[AutoPrefixer](/fr/articles/css/autoprefixer/)\n\n## Les principaux pré-processeurs\n\n### [Sass](http://sass-lang.com/)\n\nSass est à mon avis le plus mature des pré-processeurs CSS. Il possède 2\nsyntaxes (une indentée et une plus proche de CSS). Ce projet avance à bon\nrythme. Niveau fonctionnalités, rien à dire si ce n'est que celui-ci a un petit\nplus pour avec la feature `@content` qui permet pour le coup de passer tout un\nbloc de propriétés en paramètre à des mixins. Ce qui est super pratique lorsque\nl'on écrit pas mal de media queries. (Après, venez pas me dire qu'on a plein de\nfois les media-queries qui se répètent et que ce n'est pas bien pour la taille\ndu fichier, gzip se chargera de ça - <small>[exemple\nsimilaire](https://twitter.com/kaelig/status/412909849207644160))</small>.\n\nLe langage Sass possède une implémentation d'origine en Ruby mais aussi depuis\nquelques temps une implémentation C qui se veut beaucoup plus rapide et\nportable: [libsass](http://libsass.org/) mais qui est encore un peu en retard\nniveau fonctionnalité (affaire à suivre). Surtout depuis la version 3.3 qui\npossède de nouvelles fonctionnalités (comme les maps, entre autres).\n\nAvec ce pré-processeur, on peut s'éloigner pas mal du CSS natif, que ce soit\navec la syntaxe ou l'aspect programmation (il n'y a qu'à voir des trucs comme\n[modular-scale](https://github.com/Team-Sass/modular-scale) ou\n[SassyMatrix](https://github.com/HugoGiraudel/SassyMatrix)).\n\nBibliotèques construites sur Sass :\n\n* [Compass](http://compass-style.org/), solide, basé sur Ruby (incompatible\n  libsass),\n* [Bourbon](http://bourbon.io/), plus light mais plus rapide.\n\n### [LESS](http://lesscss.org/)\n\nJe n'ai pas trop envie de parler de ce pré-processeur assez classique, qui a\nfait un choix assez étrange pour les variables par exemple (oui, `@` est un\ncaractère spécial en CSS, c'est assez étrange de rajouter une couche avec pour\nles variables avec ce dernier). J'espère seulement que ceux qui l'utilisent\naujourd'hui n'utilise pas le script côté client (ce qui provoquerait un\naffichage sans CSS si le client n'a pas JavaScript activé). Bien qu'il soit\npopulaire, le repository sur GitHub n'est pas signe de bonne santé à mes yeux.\nVoir des pull-requests qui traînent vielles de plusieurs <del>mois</del>\n<ins>années</ins> me laissent dubitatif... Puis il n'y a qu'à voir l'exemple sur\nla homepage du site avec les box-shadow, pour voir que ce pré-processeur est\nassez déprécié.\n\nAjoutons à cela le fait que Twitter Boostrap a (enfin) une version Sass...\n\nCôté fonctionnalités, l'aspect programmation est assez laborieux avec la façon\ndont sont gérés les mixins conditionnels. Je passe sur ce point gerbant.\n\nBibliotèques construites sur Less :\n\n* [LESS Hat](http://lesshat.madebysource.com/),\n* [LESS Elements](http://www.lesselements.com/).\n\n### [Stylus](http://learnboost.github.io/stylus/)\n\nStylus se veut plus transparent que les autres pré-processeurs. C'est un point\nréussi puisqu'il permet d'avoir des mixins transparents au niveau écriture. Cela\npeut par contre bien entendu rendre la maintenance et la compréhension plus\ndifficile si on en abuse. Il permet aussi de coder sans `{}` ni `:` ni `;` (bien\nque tout cela soit optionnel)\n\nNiveau fonctionnalités cela ne vaut pas Sass. Ici pas de `@content` ou de maps.\n\nBibliotèque construite sur Stylus :\n\n* [Nib](http://visionmedia.github.io/nib/)\n\n### Alternatives\n\nOn peut s'amuser à faire un pré-processeur CSS avec n'importe quel langage c'est\névident. Mais [les enfants, ne faites pas\nça.](http://www.alsacreations.com/astuce/lire/1433-utiliser-php-pour-gerer-vos-styles-css.html)\nÀ moins que vous souhaitiez alourdir vos CSS plus que vous y gagnerez. Puis si\nc'est juste pour ajouter des variables, il existe d'autres solutions...\n\n_Note: si vous avez d'autres pré-processeurs intéressants, je me ferais un\nplaisir de les ajouter ici. Mais bon [vous pouvez aussi le faire tout seul comme\nun\ngrand](https://github.com/putaindecode/putaindecode.io/blob/master/pages/fr/articles/css/preprocesseurs/index.md)._\n\n## Les pré-processeurs sont-ils vraiment nécessaire ?\n\n> Oula. Le mec vient de nous poser un post pour nous parler des pré-processeurs,\n> et il nous sort une question comme ça ? Il est où le piège ?\n\nSi je pose la question c'est que j'ai une petite réponse par là. Et elle ne va\npeut-être pas vous plaire.\n\nJe vais revenir sur certains points qui peuvent poser problème avec les\npré-processeurs.\n\n### Le nesting cay mal\n\nAhh... Le nesting, c'est bien pratique lorsque l'on travaille sur un CMS (ou\nn'importe quoi ayant un code HTML qu'on ne maitrise pas facilement) de pouvoir\nutiliser le nesting pour pouvoir rapidement produire les sélecteurs adéquats.\nMais en terme de maintenance et surtout de réutilisation, c'est vraiment à\nchier. Faut dire ce qui est.\n\n```scss\n.widget {\n  // titre\n  h3 {\n  }\n\n  // widget body\n  > div {\n    // liste\n    ul {\n    }\n  }\n}\n```\n\nCet exemple est parfait pour démontrer les limites du nesting. Comment faire si,\nsur un widget donnée, nous avons comme titre un h2 ou h4 ? Il faut alourdir la\nCSS. Pareillement, si notre fameuse liste dans le corps n'est pas dans la même\narborescence que celle décrite, il faut à nouveau alourdir notre CSS. Sans\nrentrer dans ces solutions solides (nous parlerons de BEM très bientôt), cette\nsolution serait bien plus élégante pour la réutilisation :\n\n```css\n.widget {\n}\n\n.widget-title {\n}\n\n.widget-body {\n}\n\n.widget-body-list {\n}\n```\n\nVous remarquerez que j'ai un code ici beaucoup plus compréhensible par un\nnouveau, mais aussi bien mieux réutilisable et surtout, point très important,\nnon couplé (non dépendant) à notre arborescence HTML (coucou le DOM). De plus,\nutiliser le nesting provoque des sélecteurs à rallonges, après c'est la course à\nla longueur (et au poids) des sélecteurs quand il faut surcharger une règle\nhéritée. Avec de simple sélecteurs, pas de souci de ce genre là.\n\n_ProTip™ : vous remarquerez que j'indente mon CSS à l'image des composants, ça\nmange pas de pain, est cela facilite la lecture, moins linéaire._\n\nDonc je reviens sur ce que je disais, il faut utiliser pleins de classes dans\nl'HTML. Ça sert à ça. Votre CSS produit de cette façon sera bien plus\nréutilisable.\n\n### L'abstraction cay dangereux\n\nOn en revient à la magie. Lorsqu'on a trop de couche qui cache ce qu'il y a\nréellement sous le capot, [on peut vite perdre le\ncontrôle](http://linuxfr.org/news/encore-un-exemple-de-code-spaghetti-toyota).\n\nEt voici [un parfait\nexemple](https://github.com/MoOx/compass-recipes/issues/104) où un utilisateur\nde ma bibliothèque [Compass Recipes](https://github.com/MoOx/compass-recipes)\navait un problème lorsqu'il utilisait 2 mixins qui cachaient trop de code. Dans\nnotre cas corners-tucked (version coin scotché) et background-noise (bruit\nvisuel). Il en a perdu des choses simples et avait passé beaucoup de temps à se\nprendre la tête alors que la solution était très (trop) simple (une histoire\nentre `background-image` et le shorthand `background`).\n\nJe me laisse souvent attirer par la magie d'un code, mais mon expérience\nm'indique aujourd'hui qu'il ne faut pas abuser de cette partie mystérieuse où\nl'on ne sait plus ce qui se passe.\n\nJe vous laisse imaginer du nesting caché dans des mixins qui utilisent d'autres\nmixins qui font des @extends de placeholders...\n\n> Un grand pouvoir implique de grandes responsabilités.\n\nTout est dit. Il faut faire attention. Très attention.\n\n## Mon avis sur les pré-processeurs\n\nJe pense que les pré-processeurs restent utiles mais seulement pour des projets\nde très grosse envergure, qui possède énormément de code CSS et/ou extrêmement\ndynamique. Ou que vous utilisez de solutions comme\n[Bootstrap](http://getbootstrap.com/) ou\n[Foundation](http://foundation.zurb.com/), chose que je déconseille pour autre\nchose que des prototypes.\n\nDe part mon expérience et mon recul (si si j'en prends je vous jure), je pense\nque j'aurais pu m'en passer bien plus souvent que j'ai voulu l'admettre par le\npassé. Mais bon comme je dis souvent, quel plaisir de se planter quand ce n'est\npas dans un platane !\n\nCe qu'il faut retenir clairement c'est que ce ne sont pas les pré-processeurs\nqui vont vous faire écrire des meilleurs feuilles de styles. C'est plus un\ntravail sur une méthodologie et une organisation adaptées à vos besoins qui\namélioreront votre quotidien de webdesigner (oui quoi, dès qu'on code du CSS, on\npeut utiliser l'appellation webdesigner sur son CV, ça en jette).\n\nJ'ai donc longtemps apprécié les pré-processeurs CSS, mais aujourd'hui je\ncommence à leur tourner le dos du fait que je n'utilise que trop peu de leurs\nfonctionnalités. J'évite l'overkill quoi.\n\nQuand on voit que des _grands_ de l'HTML / CSS comme\n[@necolas](http://nicolasgallagher.com/) n'utilise pas de pré-processeur, on a\nde quoi se poser des questions. Avec une bonne bibliothèque comme [SUIT\nCSS](https://github.com/suitcss/suit/), on s'en retrouve à ne manquer que des\npetites choses.\n\nQue l'on peut combler.\n\nAvec les post-processeurs par exemple.\n\nJ'ai donc à ce jour moi aussi conservé une couche pour ajouter le minimum vital\nen tant que développeur.\n\nMais ne voulant pas alourdir ce post consacré aux pré-processeurs CSS, vous\npourrez continuer la lecture au prochain épisode qui sera consacré aux\npost-processeurs...\n\n<small>(Mamam, t'as vu ce cliffhanger digne des séries US !)</small>\n\n~~Bon promis la prochaine fois je vous en parle des post-processeurs. Pour de\nvrai.~~ Chose promise, chose due : [Les post-processeurs\nCSS](/fr/articles/css/preprocesseurs/post-processeurs/)\n","__filename":"fr/articles/css/preprocesseurs/index.md","__url":"/fr/articles/css/preprocesseurs/","__resourceUrl":"/fr/articles/css/preprocesseurs/index.html","__dataUrl":"/fr/articles/css/preprocesseurs/index.html.21aee9bd11d00b2414cfbebba21e9b01.json"}