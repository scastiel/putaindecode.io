{"head":{"layout":"Post","comments":true,"date":"2014-10-14","title":"Dépendances et premier projet en Ruby","tags":["backend","ruby"],"authors":["rhannequin"],"description":"tl;dr Dans l'article précédent nous avons installé Ruby. Désormais nous allons aborder les gems, les dépendances et commencer notre web…"},"body":"<p><a href=\"#tl-dr\">tl;dr</a></p>\n<p>Dans l'<a href=\"/fr/articles/ruby/premiers-pas/\">article précédent</a> nous avons installé\nRuby. Désormais nous allons aborder les gems, les dépendances et commencer notre\nweb service.</p>\n<p>Un gem en Ruby c'est une lib, comme un paquet NPM pour NodeJS. C'est d'ailleurs\nle système de rubygems qui a inspiré le système de NPM. Pour installer un gem,\nrien de plus simple que <code>gem install sass</code>, qui ici va installer la bibliothèque\n<code>sass</code>.</p>\n<p>Un projet Ruby nécessite la plupart du temps des bibliothèques afin de ne pas\ntout faire soi-même, il est donc nécessaire d'avoir une gestion des dépendances\npour le projet.</p>\n<h2 id=\"bundler-le-gem-qui-gère-les-gems\"><a href=\"#bundler-le-gem-qui-g%C3%A8re-les-gems\" class=\"phenomic-HeadingAnchor\">#</a>Bundler, le gem qui gère les gems</h2>\n<p><a href=\"http://bundler.io\">Bundler</a> est un gem qui va vous permettre de créer un\nfichier Gemfile contenant vos dépendances, et qui vous installera les gems\nnécessaires avec la gestion des versions et de leurs propres dépendances. Un\nfichier Gemfile se présente comme ceci :</p>\n<pre><code class=\"hljs language-ruby\">source <span class=\"hljs-string\">'https://rubygems.org'</span>\nruby <span class=\"hljs-string\">'2.1.2'</span>\ngem <span class=\"hljs-string\">'sinatra'</span></code></pre>\n<p>L'instruction <code>source</code> permet de préciser l'url des dépôts de gems. La version\nde ruby n'est pas obligatoire mais j'aime la préciser pour ne pas me mélanger\ndans mes projets avec différentes versions de Ruby (voir le <a href=\"/fr/articles/ruby/premiers-pas/\">précédent article\npour les versions du Ruby</a> et\n<a href=\"https://github.com/sstephenson/rbenv\">rbenv</a>). Et enfin, la déclaration de\nnotre première bibliothèque de dépendance : <a href=\"http://www.sinatrarb.com\">Sinatra</a>.</p>\n<p>Il est possible d'être bien plus précis dans le Gemfile, comme...</p>\n<p>Préciser dans quel environnement charger les gems :</p>\n<pre><code class=\"hljs language-ruby\">gem <span class=\"hljs-string\">'sqlite3'</span>, <span class=\"hljs-symbol\">group:</span> [<span class=\"hljs-symbol\">:development</span>, <span class=\"hljs-symbol\">:test</span>]</code></pre>\n<p>Une numéro de version :</p>\n<pre><code class=\"hljs language-ruby\">gem <span class=\"hljs-string\">'rails'</span>, <span class=\"hljs-string\">'4.1.6'</span>         <span class=\"hljs-comment\"># version 4.1.6</span>\ngem <span class=\"hljs-string\">'sass-rails'</span>, <span class=\"hljs-string\">'~> 4.0.3'</span> <span class=\"hljs-comment\"># >= 4.0.3 mais &#x3C; 4.1.0</span></code></pre>\n<p>Préciser la classe à charger :</p>\n<pre><code class=\"hljs language-ruby\">gem <span class=\"hljs-string\">'valid_email'</span>, <span class=\"hljs-symbol\">require:</span> <span class=\"hljs-string\">'valid_email/email_validator'</span></code></pre>\n<p>Aller chercher directement sur Github :</p>\n<pre><code class=\"hljs language-ruby\">gem <span class=\"hljs-string\">'nokogiri'</span>, <span class=\"hljs-symbol\">github:</span> <span class=\"hljs-string\">'sparklemotion/nokogiri'</span>\n<span class=\"hljs-comment\"># https://github.com/sparklemotion/nokogiri.git</span>\n\ngem <span class=\"hljs-string\">'rails'</span>, <span class=\"hljs-symbol\">github:</span> <span class=\"hljs-string\">'rails'</span>\n<span class=\"hljs-comment\"># https://github.com/rails/rails.git</span>\n\ngem <span class=\"hljs-string\">'rails'</span>, <span class=\"hljs-symbol\">github:</span> <span class=\"hljs-string\">'rails'</span>, <span class=\"hljs-symbol\">branch:</span> <span class=\"hljs-string\">'4-1-stable'</span>\n<span class=\"hljs-comment\"># https://github.com/rails/rails.git sur la branche 4-1-stable</span></code></pre>\n<p>Il existe encore d'autres instructions, de quoi rendre sa gestion des\ndépendances vraiment fine et précise.</p>\n<p>Une fois le Gemfile prêt, bundler a plusieurs commandes de disponibles pour\npouvoir les télécharger et utiliser.</p>\n<ul>\n<li><code>$ bundle install</code> installera les gems requis</li>\n<li><code>$ bundle update</code> mettra à jour vers les versions les plus récentes si\npossible les gems requis</li>\n<li><code>$ bundle exec</code> permettra de précéder une commande ruby afin de l'exécuter\ndans le contexte du Gemfile, très utile lorsque l'on a différentes versions de\nRuby qui se baladent dans le terminal</li>\n</ul>\n<p>Bundler va générer un fichier <code>Gemfile.lock</code> qui est la description exhaustive\ndes dépendances de votre application, chaque gem avec le numéro de sa version\ninstallée, chaque dépendance pour chaque gem, une jolie arborescence plus que\nprécise.</p>\n<h2 id=\"commençons-notre-web-service\"><a href=\"#commen%C3%A7ons-notre-web-service\" class=\"phenomic-HeadingAnchor\">#</a>Commençons notre web service</h2>\n<p>Assez parlé des outils qui existent, utilisons-les. Tout d'abord installons\nBundler, sans oublier le <code>$ rbenv rehash</code> nécessaire si vous utilisez rbenv pour\nvos versions de Ruby afin de mettre à jour les commandes disponibles dans le\nterminal :</p>\n<pre><code>$ gem install bundler\n$ rbenv rehash\n</code></pre>\n<p>Pour notre première application, nous allons faire un web service avec Sinatra\nqui est un micro-framework web, ayant d'ailleurs clairement inspiré Express\n(\"Sinatra inspired web development framework for node.js\"). Notre Gemfile va\ndonc être exactement comme notre premier exemple :</p>\n<pre><code class=\"hljs language-ruby\">source <span class=\"hljs-string\">'https://rubygems.org'</span>\nruby <span class=\"hljs-string\">'2.1.2'</span>\ngem <span class=\"hljs-string\">'sinatra'</span></code></pre>\n<p>Un petit <code>bundle install</code> et nous sommes prêts à démarrer !</p>\n<p>Pour ne pas brusquer les choses, nous allons faire la version la plus simple\nd'un web service avec Sinatra, ce qui nous permettra de constater la simplicité\nextrême de Ruby et du framework :</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-comment\">########</span>\n<span class=\"hljs-comment\"># app.rb</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'sinatra'</span>\n\nget <span class=\"hljs-string\">'/'</span> <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-string\">'Hello World!'</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n<p>Qu'avons-nous fait là ? Pas grand chose, et en même temps tout juste ce qu'il\nfaut. Nous avons inclus le gem à notre script et utilisé la méthode Sinatra\n<code>get</code> nous permettant de déclarer un point d'entrée en <code>GET</code> sur la route '/'.\nCette méthode prend également comme argument un <code>block</code> caractérisé par le <code>do</code>\net le <code>end</code>. La dernière valeur du block étant la valeur de retour, nous\nrenvoyons la seule chaîne de caractères \"Hello World!\".</p>\n<p>Et maintenant : lancement ! <code>$ bundle exec ruby app.rb</code> va lancer l'application\n(mais <code>ruby app.rb</code> suffit), par défaut sur le port <code>4567</code>. Regardez vite\n<a href=\"http://localhost:4567\">http://localhost:4567</a> et là magie, \"Hello World!\" sur\nune magnifique page blanche, notre tout premier web service est fonctionnel.</p>\n<p>Alors oui, ce n'est pas une révolution. Mais tout de même, en réduisant la\nsyntaxe du block on se retrouve avec un script de deux lignes qui crée un vrai\nweb service web. Et vous allez vite voir qu'en quelques lignes de plus on peut\nvite complexifier le bousin.</p>\n<h2 id=\"au-prochain-épisode\"><a href=\"#au-prochain-%C3%A9pisode\" class=\"phenomic-HeadingAnchor\">#</a>Au prochain épisode</h2>\n<p>Dans l'article suivant nous allons ajouter des fonctionnalités à notre toute\nnouvelle application, de nouvelles routes, de la persistence et aussi des vues\ndans un format un peu plus utile.</p>\n<p>Stay tuned!</p>\n<h2 id=\"tldr\"><a href=\"#tldr\" class=\"phenomic-HeadingAnchor\">#</a>tl;dr</h2>\n<p>Voici la version abrégée de cet article :</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-comment\"># Gemfile</span>\nsource <span class=\"hljs-string\">'https://rubygems.org'</span>\nruby <span class=\"hljs-string\">'2.1.2'</span>\ngem <span class=\"hljs-string\">'sinatra'</span></code></pre>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-comment\"># app.rb</span>\n<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'sinatra'</span>\nget <span class=\"hljs-string\">'/'</span> <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-string\">'Hello World!'</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> gem install bundler</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> rbenv <span class=\"hljs-built_in\">rehash</span></span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> bundle install</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ruby app.rb</span></code></pre>\n<h2 id=\"sources\"><a href=\"#sources\" class=\"phenomic-HeadingAnchor\">#</a>Sources</h2>\n<ul>\n<li><a href=\"https://rubygems.org\">RubyGems</a></li>\n<li><a href=\"http://bundler.io\">Bundler</a></li>\n<li><a href=\"https://github.com/sstephenson/rbenv\">rbenv</a></li>\n<li><a href=\"http://www.sinatrarb.com\">Sinatra</a> et surtout son\n<a href=\"http://www.sinatrarb.com/intro.html\">README</a></li>\n</ul>\n","rawBody":"\n[tl;dr](#tl-dr)\n\nDans l'[article précédent](/fr/articles/ruby/premiers-pas/) nous avons installé\nRuby. Désormais nous allons aborder les gems, les dépendances et commencer notre\nweb service.\n\nUn gem en Ruby c'est une lib, comme un paquet NPM pour NodeJS. C'est d'ailleurs\nle système de rubygems qui a inspiré le système de NPM. Pour installer un gem,\nrien de plus simple que `gem install sass`, qui ici va installer la bibliothèque\n`sass`.\n\nUn projet Ruby nécessite la plupart du temps des bibliothèques afin de ne pas\ntout faire soi-même, il est donc nécessaire d'avoir une gestion des dépendances\npour le projet.\n\n## Bundler, le gem qui gère les gems\n\n[Bundler](http://bundler.io) est un gem qui va vous permettre de créer un\nfichier Gemfile contenant vos dépendances, et qui vous installera les gems\nnécessaires avec la gestion des versions et de leurs propres dépendances. Un\nfichier Gemfile se présente comme ceci :\n\n```ruby\nsource 'https://rubygems.org'\nruby '2.1.2'\ngem 'sinatra'\n```\n\nL'instruction `source` permet de préciser l'url des dépôts de gems. La version\nde ruby n'est pas obligatoire mais j'aime la préciser pour ne pas me mélanger\ndans mes projets avec différentes versions de Ruby (voir le [précédent article\npour les versions du Ruby](/fr/articles/ruby/premiers-pas/) et\n[rbenv](https://github.com/sstephenson/rbenv)). Et enfin, la déclaration de\nnotre première bibliothèque de dépendance : [Sinatra](http://www.sinatrarb.com).\n\nIl est possible d'être bien plus précis dans le Gemfile, comme...\n\nPréciser dans quel environnement charger les gems :\n\n```ruby\ngem 'sqlite3', group: [:development, :test]\n```\n\nUne numéro de version :\n\n```ruby\ngem 'rails', '4.1.6'         # version 4.1.6\ngem 'sass-rails', '~> 4.0.3' # >= 4.0.3 mais < 4.1.0\n```\n\nPréciser la classe à charger :\n\n```ruby\ngem 'valid_email', require: 'valid_email/email_validator'\n```\n\nAller chercher directement sur Github :\n\n```ruby\ngem 'nokogiri', github: 'sparklemotion/nokogiri'\n# https://github.com/sparklemotion/nokogiri.git\n\ngem 'rails', github: 'rails'\n# https://github.com/rails/rails.git\n\ngem 'rails', github: 'rails', branch: '4-1-stable'\n# https://github.com/rails/rails.git sur la branche 4-1-stable\n```\n\nIl existe encore d'autres instructions, de quoi rendre sa gestion des\ndépendances vraiment fine et précise.\n\nUne fois le Gemfile prêt, bundler a plusieurs commandes de disponibles pour\npouvoir les télécharger et utiliser.\n\n* `$ bundle install` installera les gems requis\n* `$ bundle update` mettra à jour vers les versions les plus récentes si\n  possible les gems requis\n* `$ bundle exec` permettra de précéder une commande ruby afin de l'exécuter\n  dans le contexte du Gemfile, très utile lorsque l'on a différentes versions de\n  Ruby qui se baladent dans le terminal\n\nBundler va générer un fichier `Gemfile.lock` qui est la description exhaustive\ndes dépendances de votre application, chaque gem avec le numéro de sa version\ninstallée, chaque dépendance pour chaque gem, une jolie arborescence plus que\nprécise.\n\n## Commençons notre web service\n\nAssez parlé des outils qui existent, utilisons-les. Tout d'abord installons\nBundler, sans oublier le `$ rbenv rehash` nécessaire si vous utilisez rbenv pour\nvos versions de Ruby afin de mettre à jour les commandes disponibles dans le\nterminal :\n\n```\n$ gem install bundler\n$ rbenv rehash\n```\n\nPour notre première application, nous allons faire un web service avec Sinatra\nqui est un micro-framework web, ayant d'ailleurs clairement inspiré Express\n(\"Sinatra inspired web development framework for node.js\"). Notre Gemfile va\ndonc être exactement comme notre premier exemple :\n\n```ruby\nsource 'https://rubygems.org'\nruby '2.1.2'\ngem 'sinatra'\n```\n\nUn petit `bundle install` et nous sommes prêts à démarrer !\n\nPour ne pas brusquer les choses, nous allons faire la version la plus simple\nd'un web service avec Sinatra, ce qui nous permettra de constater la simplicité\nextrême de Ruby et du framework :\n\n```ruby\n########\n# app.rb\n#\n\nrequire 'sinatra'\n\nget '/' do\n  'Hello World!'\nend\n```\n\nQu'avons-nous fait là ? Pas grand chose, et en même temps tout juste ce qu'il\nfaut. Nous avons inclus le gem à notre script et utilisé la méthode Sinatra\n`get` nous permettant de déclarer un point d'entrée en `GET` sur la route '/'.\nCette méthode prend également comme argument un `block` caractérisé par le `do`\net le `end`. La dernière valeur du block étant la valeur de retour, nous\nrenvoyons la seule chaîne de caractères \"Hello World!\".\n\nEt maintenant : lancement ! `$ bundle exec ruby app.rb` va lancer l'application\n(mais `ruby app.rb` suffit), par défaut sur le port `4567`. Regardez vite\n[http://localhost:4567](http://localhost:4567) et là magie, \"Hello World!\" sur\nune magnifique page blanche, notre tout premier web service est fonctionnel.\n\nAlors oui, ce n'est pas une révolution. Mais tout de même, en réduisant la\nsyntaxe du block on se retrouve avec un script de deux lignes qui crée un vrai\nweb service web. Et vous allez vite voir qu'en quelques lignes de plus on peut\nvite complexifier le bousin.\n\n## Au prochain épisode\n\nDans l'article suivant nous allons ajouter des fonctionnalités à notre toute\nnouvelle application, de nouvelles routes, de la persistence et aussi des vues\ndans un format un peu plus utile.\n\nStay tuned!\n\n## tl;dr\n\nVoici la version abrégée de cet article :\n\n```ruby\n# Gemfile\nsource 'https://rubygems.org'\nruby '2.1.2'\ngem 'sinatra'\n```\n\n```ruby\n# app.rb\nrequire 'sinatra'\nget '/' do\n  'Hello World!'\nend\n```\n\n```console\n$ gem install bundler\n$ rbenv rehash\n$ bundle install\n$ ruby app.rb\n```\n\n## Sources\n\n* [RubyGems](https://rubygems.org)\n* [Bundler](http://bundler.io)\n* [rbenv](https://github.com/sstephenson/rbenv)\n* [Sinatra](http://www.sinatrarb.com) et surtout son\n  [README](http://www.sinatrarb.com/intro.html)\n","__filename":"fr/articles/ruby/bundler/index.md","__url":"/fr/articles/ruby/bundler/","__resourceUrl":"/fr/articles/ruby/bundler/index.html","__dataUrl":"/fr/articles/ruby/bundler/index.html.3ebc10fcdb989b0fbf710186496f5de8.json"}