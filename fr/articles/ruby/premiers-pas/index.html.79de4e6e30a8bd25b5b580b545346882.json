{"head":{"layout":"Post","comments":true,"date":"2014-05-07","title":"Premiers pas avec Ruby","tags":["ruby"],"authors":["rhannequin"],"description":"tl;dr Tous les ans, depuis des années, sort un article : \"Est-ce que Ruby est mort ?\". Et chaque année les résultats sont les mêmes, \"Ruby…"},"body":"<h2 id=\"tldr\"><a href=\"#tldr\" class=\"phenomic-HeadingAnchor\">#</a>tl;dr</h2>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git <span class=\"hljs-built_in\">clone</span> git://github.com/sstephenson/rbenv.git ~/.rbenv</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'export PATH=\"$HOME/.rbenv/bin:$PATH\"'</span> >> ~/.bashrc</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'eval \"$(rbenv init -)\"'</span> >> ~/.bashrc</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">source</span> ~/.bashrc</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> git <span class=\"hljs-built_in\">clone</span> git@github.com:sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> rbenv install 2.1.1</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> rbenv global 2.1.1</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> gem install sinatra</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> rbenv <span class=\"hljs-built_in\">rehash</span></span></code></pre>\n<p>Tous les ans, depuis des années, sort un article : <em>\"<a href=\"http://www.reddit.com/comments/1oi8wd\">Est-ce que Ruby est mort\n?</a>\"</em>. Et chaque année les résultats sont\nles mêmes, <em>\"Ruby perd en intensité\"</em>, <em>\"Node.js prend le dessus\"</em>. Et pourtant\nRuby reste chaque année dans l'actualité avec autant d'importance. Il faut être\nhonnête et admettre que <a href=\"http://blog.federicocarrone.com/2014/01/18/ruby-dying-or-ruby-hype-dead\">Ruby souffre de certaines\ndifficultés</a>\ncomme tous les langages, mais <a href=\"http://jmoses.co/2013/12/21/is-ruby-dying.html\">Ruby n'est pas\nmort</a> et il y a encore beaucoup\nà en tirer, du langage, de ses frameworks et de sa communauté. Sans oublier que\nde grands sites l'ont utilisé et l'utilisent toujours comme Twitter, Github,\nShopify, ou encore Hulu.</p>\n<p>Nous commençons donc une série d'articles sur Ruby afin de le découvrir et\ncommencer à développer et à devenir productif avec. Et pour ce premier article,\nnous allons voir comment l'installer. Dans les suivants nous installerons notre\npremière gem, nous utiliserons Sinatra pour notre premier projet, puis nous\nn'arriverons plus à nous arrêter.</p>\n<h2 id=\"un-langage-des-implémentations\"><a href=\"#un-langage-des-impl%C3%A9mentations\" class=\"phenomic-HeadingAnchor\">#</a>Un langage, des implémentations</h2>\n<p>Tout d'abord, il faut savoir qu'il existe plusieurs implémentations de Ruby,\nc'est-à-dire différents interpréteurs du langage. L'implémentation principale et\noriginale est <em>MRI</em>, pour Matz's Ruby Interpreter, Yukihiro \"Matz\" Matsumoto\nétant le créateur de Ruby. On trouve également JRuby, un interpretteur Ruby en\nJava, permettant de bénéficier de toutes les fonctionnalités de la JVM. Parmi\nles plus connues également MacRuby qui est une implémentation spécifique à OS X\net dont <a href=\"http://www.rubymotion.com\">RubyMotion</a> dépend. Pour nos articles nous\ndevrions utiliser MRI à moins qu'une envie sur une différente implémentation se\nfasse ressentir.</p>\n<blockquote>\n<p>C'est bien tout ça mais au final j'en sais pas plus sur Ruby.</p>\n</blockquote>\n<p>Et ça va en rester ainsi pour le moment, car au lieu de voir la théorie sur Ô\ncombien <a href=\"http://www.slideshare.net/astrails/ruby-is-awesome-16466895\">Ruby est\ngénial</a>, nous\nallons tout de suite installer Ruby pour nous rapprocher rapidement de notre\néditeur de texte.</p>\n<h2 id=\"installation-avec-rbenv\"><a href=\"#installation-avec-rbenv\" class=\"phenomic-HeadingAnchor\">#</a>Installation avec <em>rbenv</em></h2>\n<p>Il existe de nombreuses façons d'installer Ruby, un petit peu comme Node.js en\npassant par Github, par les packages officiels, brew, etc. <em>rbenv</em> reste d'après\nmoi la façon la plus simple, propre et légère. Beaucoup pourront préférer <em>RVM</em>\ndisant qu'il fait la même chose en mieux, d'autres diront qu'au contraire il en\nfait trop en écrasant par exemple la méthode <code>cd</code>. J'ai utilisé les deux, il\nfallait faire un choix, ce sera <em>rbenv</em>.</p>\n<p>Pour utiliser <em>rbenv</em>, il faut avoir Git. Si vous ne l'avez pas, vous devriez.\nEt ça tombe bien, <a href=\"https://github.com/madx\">madx</a> et\n<a href=\"https://github.com/Erwyn\">Erwyn</a> ont fait deux super articles pour\nl'<a href=\"/fr/articles/git/\">utiliser</a> et le\n<a href=\"/fr/articles/git/log-bisect-rebase-reflog/\">dompter</a>. On commence donc par\ninstaller <em>rbenv</em> :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git <span class=\"hljs-built_in\">clone</span> git://github.com/sstephenson/rbenv.git ~/.rbenv</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'export PATH=\"$HOME/.rbenv/bin:$PATH\"'</span> >> ~/.bashrc</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'eval \"$(rbenv init -)\"'</span> >> ~/.bashrc</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">source</span> ~/.bashrc</span></code></pre>\n<p>Désormais <em>rbenv</em> est installé et ses commandes sont disponibles dans votre\nterminal. Il faut maintenant lui installer le plugin pour récupérer les\ndifférentes versions de Ruby :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git <span class=\"hljs-built_in\">clone</span> git@github.com:sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build</span></code></pre>\n<p>C'est bon, vous pouvez installer Ruby. J'ai constaté sur Ubuntu qu'il était\nnécessaire d'installer au préalable <code>libssl-dev</code> et <code>g++</code>, simplement avec <code>sudo apt-get install libssl-dev g++</code>. Lançons-nous :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rbenv install 2.1.1</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> rbenv global 2.1.1</span></code></pre>\n<p>Séquence émotion. Vous êtes désormais maître de l'Univers.</p>\n<p>Vous avez Ruby 2.1.1 d'installé. La ligne <code>rbenv global</code> permet comme son nom\nl'indique d'utiliser cette version de Ruby de façon globale à l'utilisateur, si\njamais plusieurs versions coexistent.</p>\n<p>C'était facile n'est-ce pas ? Et bien c'est encore plus facile d'utiliser une\nbibliothèque (appelée \"gem\") ou un framework Ruby. Comme nous allons utiliser\nSinatra dans notre prochain article, autant l'installer tout de suite. Pour\ninstaller une gem qui sera exécutée dans la console comme Sass il est nécessaire\nde l'installer de cette façon : <code>gem install sass</code>. Seulement pour Sinatra, nous\navons seulement besoin que le framework soit disponible dans nos scripts Ruby.\nPour cela nous allons utiliser un gestionnaire de dépendance des gem Ruby, et\nnous verrons cela dans <a href=\"/fr/articles/ruby/bundler/\">le prochain article pour nos premiers pas avec\nSinatra</a>.</p>\n<p>D'ici là vous pouvez commencer à jouer avec Ruby en tapant la commande <code>irb</code>\ndans votre terminal, qui lance l'interpretteur Ruby. Pourquoi pas essayer un\n<em>Hello World!</em> à la Ruby ?</p>\n<pre><code class=\"hljs language-ruby\">puts <span class=\"hljs-string\">'Hello World!'</span>\nputs (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">3</span>).to_a.reverse.join(<span class=\"hljs-string\">' ... '</span>) &#x3C;&#x3C; <span class=\"hljs-string\">' ... The World is ours!!!'</span></code></pre>\n<p>Enjoy!</p>\n","rawBody":"\n## tl;dr\n\n```console\n$ git clone git://github.com/sstephenson/rbenv.git ~/.rbenv\n$ echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bashrc\n$ echo 'eval \"$(rbenv init -)\"' >> ~/.bashrc\n$ source ~/.bashrc\n$ git clone git@github.com:sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build\n$ rbenv install 2.1.1\n$ rbenv global 2.1.1\n$ gem install sinatra\n$ rbenv rehash\n```\n\nTous les ans, depuis des années, sort un article : *\"[Est-ce que Ruby est mort\n?](http://www.reddit.com/comments/1oi8wd)\"*. Et chaque année les résultats sont\nles mêmes, *\"Ruby perd en intensité\"*, *\"Node.js prend le dessus\"*. Et pourtant\nRuby reste chaque année dans l'actualité avec autant d'importance. Il faut être\nhonnête et admettre que [Ruby souffre de certaines\ndifficultés](http://blog.federicocarrone.com/2014/01/18/ruby-dying-or-ruby-hype-dead)\ncomme tous les langages, mais [Ruby n'est pas\nmort](http://jmoses.co/2013/12/21/is-ruby-dying.html) et il y a encore beaucoup\nà en tirer, du langage, de ses frameworks et de sa communauté. Sans oublier que\nde grands sites l'ont utilisé et l'utilisent toujours comme Twitter, Github,\nShopify, ou encore Hulu.\n\nNous commençons donc une série d'articles sur Ruby afin de le découvrir et\ncommencer à développer et à devenir productif avec. Et pour ce premier article,\nnous allons voir comment l'installer. Dans les suivants nous installerons notre\npremière gem, nous utiliserons Sinatra pour notre premier projet, puis nous\nn'arriverons plus à nous arrêter.\n\n## Un langage, des implémentations\n\nTout d'abord, il faut savoir qu'il existe plusieurs implémentations de Ruby,\nc'est-à-dire différents interpréteurs du langage. L'implémentation principale et\noriginale est *MRI*, pour Matz's Ruby Interpreter, Yukihiro \"Matz\" Matsumoto\nétant le créateur de Ruby. On trouve également JRuby, un interpretteur Ruby en\nJava, permettant de bénéficier de toutes les fonctionnalités de la JVM. Parmi\nles plus connues également MacRuby qui est une implémentation spécifique à OS X\net dont [RubyMotion](http://www.rubymotion.com) dépend. Pour nos articles nous\ndevrions utiliser MRI à moins qu'une envie sur une différente implémentation se\nfasse ressentir.\n\n> C'est bien tout ça mais au final j'en sais pas plus sur Ruby.\n\nEt ça va en rester ainsi pour le moment, car au lieu de voir la théorie sur Ô\ncombien [Ruby est\ngénial](http://www.slideshare.net/astrails/ruby-is-awesome-16466895), nous\nallons tout de suite installer Ruby pour nous rapprocher rapidement de notre\néditeur de texte.\n\n## Installation avec _rbenv_\n\nIl existe de nombreuses façons d'installer Ruby, un petit peu comme Node.js en\npassant par Github, par les packages officiels, brew, etc. _rbenv_ reste d'après\nmoi la façon la plus simple, propre et légère. Beaucoup pourront préférer _RVM_\ndisant qu'il fait la même chose en mieux, d'autres diront qu'au contraire il en\nfait trop en écrasant par exemple la méthode `cd`. J'ai utilisé les deux, il\nfallait faire un choix, ce sera *rbenv*.\n\nPour utiliser *rbenv*, il faut avoir Git. Si vous ne l'avez pas, vous devriez.\nEt ça tombe bien, [madx](https://github.com/madx) et\n[Erwyn](https://github.com/Erwyn) ont fait deux super articles pour\nl'[utiliser](/fr/articles/git/) et le\n[dompter](/fr/articles/git/log-bisect-rebase-reflog/). On commence donc par\ninstaller _rbenv_ :\n\n```console\n$ git clone git://github.com/sstephenson/rbenv.git ~/.rbenv\n$ echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bashrc\n$ echo 'eval \"$(rbenv init -)\"' >> ~/.bashrc\n$ source ~/.bashrc\n```\n\nDésormais _rbenv_ est installé et ses commandes sont disponibles dans votre\nterminal. Il faut maintenant lui installer le plugin pour récupérer les\ndifférentes versions de Ruby :\n\n```console\n$ git clone git@github.com:sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build\n```\n\nC'est bon, vous pouvez installer Ruby. J'ai constaté sur Ubuntu qu'il était\nnécessaire d'installer au préalable `libssl-dev` et `g++`, simplement avec `sudo\napt-get install libssl-dev g++`. Lançons-nous :\n\n```console\n$ rbenv install 2.1.1\n$ rbenv global 2.1.1\n```\n\nSéquence émotion. Vous êtes désormais maître de l'Univers.\n\nVous avez Ruby 2.1.1 d'installé. La ligne `rbenv global` permet comme son nom\nl'indique d'utiliser cette version de Ruby de façon globale à l'utilisateur, si\njamais plusieurs versions coexistent.\n\nC'était facile n'est-ce pas ? Et bien c'est encore plus facile d'utiliser une\nbibliothèque (appelée \"gem\") ou un framework Ruby. Comme nous allons utiliser\nSinatra dans notre prochain article, autant l'installer tout de suite. Pour\ninstaller une gem qui sera exécutée dans la console comme Sass il est nécessaire\nde l'installer de cette façon : `gem install sass`. Seulement pour Sinatra, nous\navons seulement besoin que le framework soit disponible dans nos scripts Ruby.\nPour cela nous allons utiliser un gestionnaire de dépendance des gem Ruby, et\nnous verrons cela dans [le prochain article pour nos premiers pas avec\nSinatra](/fr/articles/ruby/bundler/).\n\nD'ici là vous pouvez commencer à jouer avec Ruby en tapant la commande `irb`\ndans votre terminal, qui lance l'interpretteur Ruby. Pourquoi pas essayer un\n_Hello World!_ à la Ruby ?\n\n```ruby\nputs 'Hello World!'\nputs (1..3).to_a.reverse.join(' ... ') << ' ... The World is ours!!!'\n```\n\nEnjoy!\n","__filename":"fr/articles/ruby/premiers-pas/index.md","__url":"/fr/articles/ruby/premiers-pas/","__resourceUrl":"/fr/articles/ruby/premiers-pas/index.html","__dataUrl":"/fr/articles/ruby/premiers-pas/index.html.79de4e6e30a8bd25b5b580b545346882.json"}